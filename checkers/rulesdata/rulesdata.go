// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x6b\xdc\x40\x10\xc5\x6b\xed\xa7\x18\x96\x2b\x24\x50\xa4\x3e\x70\x4d\x48\x48\x95\x14\x97\x83\x14\xc6\xc5\x4a\x3b\x5a\x2d\xde\x3f\xba\x9d\x59\xfb\x84\xf1\x77\x37\xfa\x63\x38\xae\xb0\xcb\x19\x7e\xf3\xe6\xf1\xde\xa4\xfa\x27\x65\x10\x4c\x4c\xd9\x21\x09\x61\xfd\x14\x13\x43\x29\x0a\x69\x2c\x8f\xb9\x6b\xfa\xe8\xdb\x4b\x56\x64\xdd\xcc\xd8\x9a\xf8\x6d\x21\x4d\x56\x49\xb7\x9a\x9c\x14\x95\x10\x6d\xab\x63\xff\x9d\xb2\xf7\x2a\xcd\xf0\x13\x19\x7b\x26\x08\xd6\x41\x26\x65\x90\xc0\x06\x18\x99\xa7\xe6\x2f\xbe\x9c\xf0\x92\x91\x18\x7a\xe5\x1c\xd5\x40\xd9\x18\x24\xb6\xc1\xec\x44\xfc\x11\xf5\x0c\x8a\x40\x05\x50\x8e\x31\x05\xc5\xf6\x19\xf7\x1f\xac\x0c\x01\x00\x10\xcf\x0e\x01\xaf\x13\x26\xeb\x31\xb0\x72\x3b\xd0\xe1\x10\x13\xc2\xfd\xbb\x52\xfe\xfe\x75\x96\x35\xe4\xe4\xea\xc5\x58\xb5\xe3\x6a\x60\x4c\xf0\x39\x7e\xe3\xab\x12\x43\x0e\xfd\xba\xd9\x16\xa5\x07\x4d\xae\xf9\xa3\xb8\x1f\x31\x55\xf0\x2a\x0a\xbf\x4d\xa5\xbc\xd7\x3c\x78\xe4\x31\xea\x1a\x0e\xab\xec\x61\xb1\x21\xab\x46\x14\xc5\xff\x11\x13\x96\xfe\x41\x06\xeb\xe4\x63\x73\xc6\x2b\xc3\xf1\x08\xeb\xb8\x02\xff\xb6\x94\xbe\xd4\xbc\xb5\xba\x5d\x9e\x70\xe9\xf3\xe3\x70\x0b\x97\xc6\x98\x9d\x86\x0e\x61\x4a\x38\x60\x4a\xa8\x81\x23\xf0\x88\x6b\x67\x69\x6f\xa8\x8b\x7a\x96\x95\x78\x13\xef\x01\x00\x00\xff\xff\xc6\x16\xb0\xe1\x25\x02\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 549,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1619737377, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
