// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x73\xdb\xb6\xb2\xfe\x1c\xff\x8a\xbd\x1c\x36\xa1\x14\x99\x72\x3c\x6d\xa7\x13\x47\xb9\x93\xc6\x37\xbd\x99\x49\xda\x8e\xe3\xbe\xcc\xa4\x6e\x08\x91\x2b\x1a\x63\x10\x60\x01\xd0\x12\x6f\xea\xff\x7e\x67\x09\x4a\x26\x69\x91\x51\x74\xe2\xd3\xf3\x21\x13\x8b\x58\x3c\xcf\x62\x17\xfb\x02\x20\x67\xf1\x15\x4b\x11\x52\xa5\x0b\x81\xe6\xe0\x80\x67\xb9\xd2\x16\x82\x83\x07\x5e\xca\xed\x65\x31\x0f\x63\x95\x4d\xff\x2a\x98\xe1\xa2\xb4\x38\x4d\xd5\x21\x49\xa6\x05\xd3\xc9\x34\x31\xc2\x3b\x18\x1d\x1c\x4c\xa7\x89\x8a\x9f\x9a\x22\xcb\x98\x2e\xe1\x14\x2d\xc6\xd6\x40\x82\xb9\xc6\x98\x59\x4c\x80\xab\x29\x57\x85\xe5\x02\xd6\x84\x85\x61\x29\x9a\x7a\xa6\x65\xa9\x01\x00\x30\xb6\x14\x08\xb8\xca\x51\xf3\x0c\xa5\x65\xa2\x16\x98\xe3\x42\x69\x04\x70\x20\xe1\x19\xb2\xe4\x85\x10\x81\x1e\xd5\xe3\x6c\x61\x51\x03\x8d\x37\xc7\x16\x85\x8c\xeb\x29\xa7\x1b\x5d\x82\x0c\x12\x23\xc2\xb7\xcc\xc6\x97\xa8\x47\xf0\xf1\xe0\x41\xe6\x7e\x05\x51\x07\xde\xff\x30\x8a\x46\xe1\xc1\x83\x07\x67\x48\x46\xe9\x8e\x03\x6f\xae\x71\x02\x85\xc1\x86\x02\xc0\xa5\xb1\xc8\x92\x68\x74\xb0\x9d\xe1\x15\x17\x38\x48\x41\x02\xdb\x38\x94\x69\x0c\x0f\x90\xfc\xa6\xb9\xc5\x9a\x65\x02\xee\xdf\x76\xb6\x8d\x64\x0f\x5d\x63\xfc\x13\x8b\x3a\xe5\x7a\x70\x4d\xa7\x5c\x0f\x2c\xa9\x1a\x1d\x60\xf8\x51\xe5\x2f\x85\x32\xd8\xcf\xb1\x91\xe8\x71\x4e\x63\x7c\x80\xe7\x94\x9b\x98\xe9\x64\x2f\x86\x7a\x6e\x03\xff\xa6\x2f\x40\x4c\x61\x72\x1e\x73\x55\x18\xc8\x0a\x8b\x2b\x10\x2a\xbe\x9a\x16\x92\xfe\x03\x95\xa3\x66\x96\x2b\xd9\x0d\x92\x84\xb3\x54\x2a\x63\x79\x3c\x14\x29\x59\x11\xbe\x51\xf1\x55\x30\x3a\xa1\x3f\x7f\xa9\x30\x83\x6e\xb8\x34\x84\x12\x5c\xa0\x6e\x89\x56\xd1\x33\x67\x49\x25\x71\x37\x68\xa6\x53\x88\xb2\xe2\x49\x04\x4c\x26\xf4\xd7\x71\x04\x4c\x23\xb0\x24\xc1\x04\xac\x82\x8c\x5d\x21\xe4\xca\x18\x3e\x17\x08\xba\x32\x22\x30\x10\x5c\x22\x2c\x2f\x51\x23\x44\xd9\x71\x44\x46\x2c\x0c\x26\x10\x2c\xb9\xbd\x04\xe6\xf4\x20\x9f\x4c\xa7\x20\x95\xfb\xd9\x70\x90\x9f\x15\x4f\x36\x3a\xfb\x59\x71\xbc\xd1\xd7\x39\xeb\x37\x42\x0e\xb2\xf7\x5e\x56\x3c\xf1\x2e\xc2\x73\x5c\x59\x98\xcd\xa0\xfa\x70\x5c\x7f\x68\x79\xd5\xad\x9b\x1b\xc8\xb8\x31\x5c\xa6\x93\xda\x15\xa4\x57\x85\x4c\xd9\x2b\xcb\x30\xe1\xcc\xa2\x28\x1d\xcb\x0b\x1b\xac\x11\x5b\xdb\xa7\xd2\xee\xac\xa5\xde\xd9\x7f\x80\x7e\xd3\x29\x24\x7c\xb1\x40\x8d\xd2\x42\x77\x73\xf5\xd8\xd6\xf1\x7e\x91\x25\x34\xb6\xb9\x53\x79\x02\x19\x2b\xe7\x08\x0e\x17\x96\xcc\x00\x97\x16\x65\x82\xc9\x7f\x7f\x8e\x81\x1b\x3a\xde\x97\x8a\x67\x3b\xeb\x48\x46\x56\x05\xed\x75\x9a\xb0\x8b\x5d\xdf\xfc\x2b\x1a\x3b\xf5\x36\x68\x4f\x36\x16\xf8\x22\xe6\x3c\xfb\xb2\xba\x9d\xed\xac\x5c\x6f\xae\x94\x5c\xd4\x3d\x03\x70\x09\x97\xd6\xe6\xe1\x8f\xb8\x3c\xc3\xbf\x0a\x34\x16\x62\x26\x84\x99\x80\x29\xd2\x14\x8d\xe5\x32\xad\x25\xd4\xf7\x2a\x29\x81\x19\x60\x12\x98\xb0\xa8\x25\xb3\xfc\x1a\x3f\xb7\xed\xe8\xd0\x05\xde\x0f\xff\x73\xee\x4d\xa0\xd0\x62\x42\x8a\x75\xd3\xea\x90\x78\x43\xaf\x3a\xc5\xd2\x17\xf7\x61\xa0\x35\xf1\xba\x98\x7e\x86\xf6\x52\x25\x13\xf0\x2b\x58\x9f\xd4\xf0\xda\xee\x92\x5c\x34\xdc\x55\xfd\xac\x04\xde\x39\x2b\x7d\x12\xb3\xa9\xaa\xd7\x74\xb0\xd7\x34\xae\xb9\x54\x85\x48\x60\x8e\x90\x6b\xf2\xb8\x76\xe9\xdf\x5e\x62\xe5\x33\x5d\x7b\x68\xae\x92\xd2\x1b\xf0\x2f\xae\x72\x8d\xc6\x50\x4a\x02\xc1\xaf\x10\xde\x5f\xe8\x42\x62\x60\x46\xef\x8f\x2e\xc0\x5e\x32\x4b\x11\x09\x31\xa3\x32\x5b\xc8\x25\x93\xd4\x57\x92\x08\x18\xc1\x63\x04\x26\x84\x8a\xab\x9c\xd6\xf1\x6e\x8e\x7a\xa1\x74\xc6\x64\x3c\xe8\x63\x0d\x4f\x67\x2d\xd2\x8e\x53\xf5\x04\x3e\x90\x48\x61\x17\xdf\x85\xa7\x18\xab\x04\xcf\x0a\x89\xaf\xe5\x3b\xab\xb9\x4c\x03\xb3\xde\x05\x52\x59\x24\xde\x77\x88\xf0\x83\x02\x6e\x4c\x81\xb0\x50\x1a\x12\xb4\x8c\x0b\xf3\xb4\x32\xac\x79\x3a\x9d\x36\x1a\xec\x54\x09\x26\xd3\x69\xaa\xa6\x95\xbc\x99\x7e\xfd\xcd\xf1\xb7\x47\x6e\x83\x38\xbb\xde\x52\x0e\x75\xb0\xf5\x02\xfc\x6a\x05\x9d\xf0\x35\xb4\x1b\xca\x1c\xc3\xd7\x26\x88\x4c\xa5\x75\x34\x6a\x05\x6e\xac\xa4\xe1\x09\x6a\x2a\xd7\x82\xc5\x14\x47\xbe\x0f\x55\x65\xee\x5b\xb6\x6f\x46\x43\x2d\x4e\x15\xb2\xa0\x16\x10\x09\x94\x11\x15\x7e\x09\x1a\x4d\x21\x2c\x55\x30\x35\xbf\xae\x72\x2e\x19\x47\xa1\x91\x8f\xac\x6b\x1b\x0c\x4a\xb3\x35\x48\x3b\x3e\x13\x28\x03\xa6\xf5\x08\x9e\xcd\xe0\xa8\xe3\xaf\xcd\xd8\x8c\xc6\x2a\x43\x1a\xa1\xf2\xbc\x7c\x83\x72\xc8\x82\x34\xcf\xff\x30\x82\xe7\x33\x38\x8a\x46\xe1\xda\x34\xbe\x4f\x0a\x33\xb1\x64\xa5\x01\xab\x0b\x8c\x46\x5b\x26\x3d\xeb\x9f\xb3\x60\xc2\x6c\x99\xb4\x72\xca\xb7\x67\xc5\x4c\x52\x40\xad\x05\x66\x95\x40\xbf\x91\xaf\x99\x28\x10\xcc\x92\xe5\x39\xb9\x8c\x7c\xe4\x22\x86\x1a\x32\xa9\x2c\x14\xd4\x39\x40\xce\x34\x13\x02\x05\x30\x63\x78\x2a\x29\x0a\x76\xb0\xf1\xd8\x66\x39\xcc\x60\xbc\x3a\x81\xf1\x8a\xfe\x28\x4f\x60\x5c\xd2\x1f\x36\xcb\x3b\x36\x1f\xaf\x26\xf5\x58\x39\x81\xf1\xca\x59\xfd\x9a\x89\x77\x4b\x96\x0f\xd9\xdc\x27\x8e\xa7\x33\xf0\xcb\x13\xf0\x69\xbe\xbf\x3a\x01\x9f\xd8\x68\xa4\xd5\x86\x7b\x64\x1b\x8d\x87\x4b\x3a\x92\x50\x66\x8f\xfc\x72\x52\xcb\xae\x26\xe0\x97\xd1\x50\x96\x31\x4b\x6e\xe3\xcb\x43\x75\x8d\xfa\x70\xae\x94\x00\x63\x99\x45\xb2\x84\x71\x16\xa3\xec\x82\xab\x5c\xf0\x98\x5b\x88\x2a\x3f\x83\x65\xa9\x33\xf1\x0e\xd6\x72\x04\xd5\x06\x81\x8f\x61\x18\xde\x74\x2c\x54\x8f\xbb\x21\xb7\x29\xab\x2f\xe7\xba\x18\x8c\xeb\x16\x2e\xf8\xe3\x0f\x70\xd3\x3e\x9d\xb8\x88\x45\x78\xd4\x92\xbc\x79\xe4\xa2\x77\xfd\xf5\xe3\xcd\xa3\xd6\x16\xac\x3f\x93\xb9\x77\x87\xbe\x95\xee\xc2\xd3\x88\xa3\xe8\xf5\xc0\xa6\x57\x85\x04\xab\xbc\x86\xb2\xca\x33\x94\x22\x16\x82\xa5\xd1\xe6\x86\x20\x57\xd4\x28\xe8\xfe\xe3\x4f\xc7\xf4\x73\xda\x41\x63\xc2\x08\xbf\x57\x4a\x04\xde\xdc\x9b\xb8\xa8\x9b\x80\x37\x87\x44\xc5\xc6\xeb\x56\xea\x6b\xa6\x61\x0e\xb4\x13\x4e\x60\x33\xf3\x57\xa6\x83\x87\x73\x9a\xb4\x0d\xa0\x72\x1a\xc9\x9e\x92\xfe\x43\x3e\x6b\xe8\xe2\x8f\xab\xf3\xea\xe6\x28\xd9\x36\x02\x75\x34\x2e\x57\x64\xca\xd8\xaa\xfc\x89\x92\x5a\x16\xd4\x5a\xe9\x13\xd8\xa4\x65\x17\xc7\x4d\x45\x5b\xde\x74\x84\xa7\x85\x6b\xed\xef\x81\x74\x0d\xbd\x9d\xf8\x95\x50\xcc\x7e\xfb\xf5\x3d\xf0\xd6\xc8\xdb\x69\x5f\x4b\x7b\x0f\x94\xaf\xa5\xed\xa5\xbb\x97\x35\x56\xb8\xdb\x29\xd7\xa5\xf6\x8b\x73\x3a\xe0\xed\xa4\xbf\xf0\x7b\xb1\x2b\xc1\xf6\x13\xde\x8b\x65\x1d\xb0\x23\xed\xef\x3f\xb3\xdc\x96\xe0\xba\x22\x88\x2f\x31\xbe\xaa\x2b\x42\x5d\x8b\xa9\xde\x58\x94\x90\x51\xae\xe1\x09\x57\x19\xb3\x9c\x8e\x1d\xe5\xe7\x1e\x26\xa8\xaa\x9b\xba\x2d\xe9\x14\x87\xaa\x4f\xf7\x5c\x8a\xa9\x14\x72\x0e\x3a\xa7\xe6\xfc\x53\x2d\x8b\x19\xc1\x7f\xb9\x46\xe2\xb3\x7a\x3e\x6f\x9d\xdd\x23\xdf\x8f\x5c\x36\x8f\x7c\x43\x50\x7f\x78\x7f\x78\x54\x4c\xb7\x10\xcd\xbe\x1c\xd1\xec\x96\xa8\xd7\x37\x1a\x93\x42\x26\x4c\x5a\x72\xef\x35\x6a\x77\x4a\x98\xa3\x5d\x22\xca\xb5\xcf\x98\x4c\xe0\xfd\xc5\xbc\xb4\xbb\x94\xe9\x58\xe5\x65\x30\x9f\xd4\x13\x02\x33\xea\x16\x86\xb5\x80\xa9\x13\xbe\x23\xf9\x9d\xa4\xcd\x90\x2b\xaa\x79\xfe\x87\x0d\xb2\x6f\x46\x8d\xdd\x5c\x35\x2f\x86\x67\xb9\xe0\x8b\x12\xa2\x5b\x99\x88\x8e\x4c\x91\x6f\x86\x9b\x97\x4a\x07\x13\xbe\x96\x09\xae\xdc\x91\xb7\xf7\x60\x54\x9d\x86\xba\xa5\xb3\x71\x12\xea\xb6\x2d\x4d\xe8\xc0\xfd\x0a\x56\xa3\x09\x94\x5d\xc3\x54\x16\xa8\xe5\x56\x9b\x65\x96\xa3\x2f\x7b\xfa\x39\xfe\xe6\xbb\x6f\xbf\xae\xef\xef\x89\xea\x05\x2d\x67\xb0\x3f\xda\xb6\x00\x9f\x56\xe0\x97\xdd\x6b\x8c\x95\x77\x11\xfe\x5c\x68\x84\x87\x0f\x21\x7b\xef\x95\xf5\xcf\x5d\x4f\x42\x4d\x0b\xf8\xb7\x26\xf0\xcb\xd1\xe0\x49\x88\x16\x43\xb5\xb3\xe9\xb8\x3a\xb7\xd4\x91\x91\x38\xfc\x6a\x8f\x4b\x8e\x74\x5e\x5d\x6a\x96\xe7\x77\x7b\xa0\x6d\x5b\x7a\x99\x86\x2f\x92\x24\x38\x7c\xd2\xf5\xd8\x32\x0d\x4f\x95\xc4\xf5\x8d\x6e\x0d\xf9\xaa\x90\x83\x06\xf5\x6f\xf1\x3a\xe6\x5b\xa6\xad\x50\x2f\x65\x1c\xfe\xc6\xb8\xfd\x41\xab\x22\xef\x84\x3c\x6d\xc9\xcd\x58\xa5\x05\xb8\x2b\x06\x4a\xe3\x94\x07\xda\xe9\xc5\x9f\x17\x8b\xf0\x5c\x17\x32\x66\x16\x83\xa3\x2e\xf1\xbc\x58\x34\x99\x9d\x1f\xbe\x2f\x16\x0b\xd4\x5b\x78\xdd\x40\x78\x86\x06\xed\x20\x6b\x75\x99\xf1\xbf\x4c\x26\xa2\xb6\x4a\x7d\xbb\x61\x5f\xa9\x42\x26\xcd\xe8\x25\xd8\xd6\x60\x3d\x6b\x10\x7e\xbd\x33\xdf\xe5\x82\xdb\x1f\x37\x4f\x31\xce\xae\x4d\xe4\x96\xe0\x5d\xc8\xbb\x88\x67\x6e\xdb\x34\x5e\x77\x86\x60\x6b\xe9\x17\x42\xec\x82\xfd\x96\xe5\x41\x21\x39\x1d\x25\xc3\x73\x75\xce\xad\xc0\xf5\xf3\xd1\x36\xf0\x5a\x64\xd0\x10\xce\x5f\xb5\x19\x6e\x73\xaf\x17\x7a\xa3\x6d\x7a\x37\xc4\x87\x14\x76\x62\xbb\x99\xa2\x25\xfb\x09\x43\x38\xd9\xb6\x19\x7e\xa1\xc0\xd9\x66\x06\x27\x5c\x0b\x7c\x2e\xea\x1b\xb5\x1c\x46\xad\x04\x3e\x17\xb5\xd7\x65\x6b\xd4\x4f\x3b\x2c\xd1\x6c\x19\x9e\x6a\xb6\x7c\xcb\xcc\x55\xcb\xb4\xf4\x4f\x72\x31\x01\x9e\xb1\x14\xc3\x9f\xe9\xa4\xf6\xf1\xe6\xee\xfb\x62\x45\xb8\x81\xb9\x4b\xd6\x9b\x2c\x23\x8d\x29\xae\xf2\xf0\xa5\xca\x72\x2e\x70\x1c\x0d\xe4\xcb\xb5\xec\xdb\xc2\xd8\x8d\xfc\x0e\x09\x53\x63\x7d\xa3\xd7\xe6\x0a\x3c\xca\xfd\x16\x72\x66\x2d\x6a\x79\xe7\xc8\xa8\xb1\x31\xa7\xc1\x79\x77\x5e\x95\x6e\x9d\x20\xc9\x0d\x65\xdb\x8e\x0a\x7e\xce\x6c\x37\xfb\xe5\xcc\x7a\x17\xe1\x4b\xe2\x68\x55\x2a\xaa\xad\x2d\xe6\xfa\xfe\x94\x30\xdc\xa3\xe4\x5d\x5d\xdb\x8f\x9e\x6d\xf2\x9f\x7f\x7a\xf7\xfa\xf7\x7b\xd7\xa0\x62\xd9\xf1\x6d\xb4\x5d\x39\x77\xbd\x0e\xe8\x66\x49\x33\x81\x85\x56\xd9\x04\xac\x9a\xc0\x51\xd7\xab\x83\xd2\x54\x53\xd7\xaf\xa1\x2f\x99\x10\xbb\x34\x22\xdb\x32\x92\xff\x7f\xa8\x55\xd7\xaa\xf4\xcd\xbb\x08\x7f\x65\xa2\xc0\xea\x2c\xeb\xda\xeb\xbe\xe7\x29\xa6\x53\x38\x9a\x40\xae\xd5\x9c\xcd\x45\x09\x19\x52\x5f\x7c\xf8\x24\x1a\x85\xee\x21\xc5\xe1\xed\x96\x22\xff\xad\x0a\x7d\xba\x26\xfe\xa3\xf6\xf9\x27\x75\x69\x28\x43\xcd\x99\x4c\x82\x56\xde\x8e\xa4\x3a\x54\x39\xb8\xa1\x2a\x0a\x9a\xa0\xee\x5d\x98\xc8\x8a\xea\x22\x73\x28\xaa\x6e\x6f\x7e\xdb\x1d\x68\x7d\x26\xe1\x98\xc0\xbc\xac\xcf\xce\xb7\xb2\xf5\x73\xb1\xda\xa9\x0f\x5d\xc1\x0c\x56\x30\x86\xe3\x4e\x84\xad\x60\x3c\x83\x63\x17\x47\x0e\xfa\xa7\xe1\x3b\x61\x77\xa5\x0b\x8f\x81\xec\x75\xa7\x79\xbf\x2d\x6a\xdb\xce\x95\xab\xc7\x8f\xdb\x25\x72\x8d\x76\xb8\x17\xda\xe1\x61\xb7\x53\xdd\x28\xe7\x97\x7b\xe0\xc1\xe3\x59\x7d\x53\xbd\x4d\xc3\xfd\x20\x0f\xd7\x90\x5b\x30\xc7\x7b\x62\x8e\xfb\xd5\x9c\xee\x09\x39\xed\x87\xfc\x6a\x4f\xc8\xaf\xfa\x21\x1f\xee\x09\xf9\xb0\x1f\xf2\xef\x3d\x21\xff\xee\x87\xfc\x73\x4f\xc8\x3f\xfb\x21\x9f\x3d\xdb\x13\xf3\xd9\xb3\x7e\xd0\xe7\xcf\xf7\x04\x7d\xfe\x7c\xc0\x45\xfb\xae\xfe\xe1\x66\xf9\x37\x07\xff\x1f\x00\x00\xff\xff\x45\x95\x26\xa6\xc7\x28\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 10439,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1622919648, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
