// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6f\x73\xdb\x36\xd2\x7f\x1d\x7f\x8a\x7d\x38\x6c\x22\x29\x32\xe5\x78\xda\x4e\x27\x8e\xf2\x4c\xda\x5c\x7b\x99\x49\xda\x8e\xe3\xb4\x9d\x49\xdd\x10\x22\x57\x34\xc6\x20\xc0\x02\xa0\x25\x5e\xea\xef\x7e\xb3\x00\x25\x93\xb4\xc4\x28\x3a\xfb\x7a\x2f\x3c\x96\xc8\xc5\x6f\x17\xbf\xc5\xfe\x83\x0a\x96\x5c\xb2\x0c\x21\x53\xba\x14\x68\x0e\x0e\x78\x5e\x28\x6d\x61\x70\xf0\x20\xc8\xb8\xbd\x28\x67\x51\xa2\xf2\xc9\x9f\x25\x33\x5c\x54\x16\x27\x99\x3a\x24\xc9\xac\x64\x3a\x9d\xa4\x46\x04\x07\xc3\x83\x83\xc9\x24\x55\xc9\x53\x53\xe6\x39\xd3\x15\xbc\x44\x8b\x89\x35\x60\x4a\x53\xf0\x84\xab\xd2\x40\x5e\x5a\x5c\x82\x50\xc9\xe5\xa4\x94\xf4\x0f\x54\x81\x9a\x59\xae\xa4\xa9\x57\x5b\x96\x19\x00\x80\x94\xb3\x4c\x2a\x63\x79\x02\xb8\x2c\x50\xf3\x1c\xa5\x65\xa2\x96\x9a\xe1\x5c\x69\x04\xc8\xcb\xe8\xb5\x4a\x2e\x07\xc3\x13\xfa\xf8\xce\x61\x0e\x86\xb5\x10\x9b\x5b\xd4\xd0\x12\x4a\x71\x8e\xba\x25\x3a\x2f\x65\x02\x33\x96\x3a\x89\x1c\x52\x23\xa2\x37\xcc\x26\x17\xa8\x87\xf0\xf1\xe0\xc1\x64\x02\x71\x5e\x3e\x89\x81\xc9\x94\x3e\x1d\xc7\xc0\x34\x02\x4b\x53\x4c\xc1\x2a\xc8\xd9\x25\x42\xa1\x8c\xe1\x33\x81\xa0\xd1\xb1\xc6\x40\x70\x89\xb0\xb8\x40\x8d\x10\xe7\xc7\x31\x70\x03\xa5\xc1\x14\x06\x0b\x6e\x2f\x80\x79\x3b\x86\x07\x0e\x5f\x2a\xff\xf5\xe0\x41\xee\x55\x0f\xe2\x30\x2f\x9f\xac\x6d\x0e\xf3\xf2\x78\x6d\x6f\x3c\x8c\x0e\x1e\x3c\xf8\x95\x90\x07\xf9\xfb\x20\x2f\x9f\x04\xe7\xd1\x19\x2e\x2d\x4c\xa7\xe0\x1e\x1c\xd7\x0f\x9c\xe0\xa9\x33\x68\x10\xfb\x7d\x73\x03\x39\x37\x86\xcb\x6c\x5c\xbb\x82\xec\x72\xc8\x98\x02\xcf\x73\x4c\x39\xb3\x28\x2a\xaf\xe5\x85\x1d\xac\x10\xc9\xd4\xb6\x75\xa7\x2d\xf3\x4e\xff\x07\xec\x9b\x4c\x20\xe5\xf3\x39\x6a\x94\x16\xba\x87\x6b\x0b\xb7\x5e\xef\x9d\x6c\xa1\x71\xcc\xbd\xc9\x63\xc8\x59\x35\x43\xf0\xb8\xb0\x60\x06\xb8\xb4\x28\x53\x4c\xff\xff\x73\x08\x6e\xd8\x78\x5f\x26\x9e\xee\x6c\x23\x91\xac\x4a\x3a\xeb\xb4\x60\x17\x5e\x5f\xff\x27\x16\x7b\xf3\xd6\x68\x4f\xd6\x0c\xdc\x09\x9d\xa7\x77\x6b\xdb\xe9\xce\xc6\x5d\x6f\xcb\x95\x92\x0b\x28\x0d\xcb\x90\xd6\xc3\x85\xb5\x45\xf4\x23\x2e\x4e\xf1\xcf\x12\x8d\x85\x84\x09\x61\xc6\x60\xca\x2c\x43\x63\xb9\xcc\x6a\x09\xf5\xad\x4a\x2b\x60\x06\x98\x04\x26\x2c\x6a\xc9\x2c\xbf\xc2\x4e\x46\x35\xb6\x12\xd8\x97\x4c\x3b\xea\x06\xc1\x0f\xff\x38\x0b\xc6\x50\x6a\x31\x26\xc3\xba\x69\xb5\x4f\xbc\x61\x57\x9d\x62\xe9\x89\x7f\xb0\x21\xcb\xae\x5c\x15\x74\x31\xc3\x1c\xed\x85\x4a\xc7\x10\x3a\xd8\x90\xcc\x08\xda\xee\x92\x5c\x34\xdc\xe5\xbe\x3a\x81\xb7\x9e\xa5\x4f\x62\x36\x4d\x0d\x9a\x0e\x0e\x9a\xe4\x9a\x0b\x55\x8a\x14\x66\x08\x85\x26\x8f\x6b\x9f\xfe\xed\x05\x3a\x9f\xe9\xda\x43\x33\x95\x56\x41\x8f\x7f\x71\x59\x68\x34\x86\x52\x12\x08\x7e\x89\xf0\xfe\x5c\x97\x12\x07\x66\xf8\xfe\xe8\x1c\xec\x05\xb3\x14\x91\x90\xb0\xd2\x20\x94\x72\xc1\xa4\xc5\x14\x48\x04\x8c\xe0\x09\x02\x13\x42\x25\x2e\xa7\x75\xbc\x5b\xa0\x9e\x2b\x9d\x33\x99\xf4\xfa\x58\xc3\xd3\x69\x4b\x69\xc7\xa9\x7a\x0c\x1f\x48\xa4\xb4\xf3\x6f\xa2\x97\x98\xa8\x14\x4f\x4b\x89\xaf\xe4\x5b\xab\xb9\xcc\x06\x66\x75\x0a\xa4\xb2\x48\x7a\xdf\x22\xc2\x0f\x0a\xb8\x31\x25\xc2\x5c\x69\x48\xd1\x32\x2e\xcc\x53\x47\xac\x79\x3a\x99\x34\xfa\x87\x4c\x09\x26\xb3\x49\xa6\x26\x4e\xde\x4c\xbe\xfc\xea\xf8\xeb\x23\x7f\x40\x3c\xaf\x37\x2a\x7b\x8e\x49\x5c\x6f\x20\x74\x3b\xe8\x84\xaf\xa1\xd3\x50\x15\x18\xbd\x32\x83\xd8\x38\xab\xe3\x61\x2b\x70\x13\x25\x0d\x4f\x51\x53\xb9\x16\x2c\xa1\x38\x0a\x43\x70\x95\x79\xdb\xb6\x43\x33\x8c\x7b\xdc\xea\x42\x16\xd4\x1c\x62\x81\x32\xa6\xc2\x2f\x41\xa3\x29\x85\xa5\x0a\xa6\x66\x57\x2e\xe7\x12\x39\x0a\x8d\x7c\x64\x7d\xdb\x60\x50\x9a\x8d\x41\xda\xf1\x99\x40\x39\x60\x5a\x0f\xe1\xd9\x14\x8e\x3a\xfe\x5a\xbf\x9b\xd2\x3b\x47\xa4\x11\xaa\x28\xaa\xd7\x28\xfb\x18\xa4\x75\xe1\x87\x21\x3c\x9f\xc2\x51\x3c\x8c\x56\xd4\x84\x21\x19\xcc\xc4\x82\x55\x06\xac\x2e\x31\x1e\x6e\x58\xf4\x6c\xfb\x9a\x39\x13\x66\xc3\xa2\xa5\x37\xbe\xbd\x2a\x61\x92\x02\x6a\x25\x30\x75\x02\xdb\x49\xbe\x62\xa2\x44\x30\x0b\x56\x14\xe4\x32\xf2\x91\x8f\x18\x6a\xc8\xa4\xb2\x50\x52\xe7\x00\x05\xd3\x4c\x08\x14\xc0\x8c\xe1\x99\xa4\x28\xd8\x81\xe3\x91\xcd\x0b\x98\xc2\x68\x79\x02\xa3\x25\x7d\xa8\x4e\x60\x54\xd1\x07\x9b\x17\x1d\xce\x47\xcb\x71\xfd\xae\x1a\xc3\x68\xe9\x59\xbf\x62\xe2\xed\x82\x15\x7d\x9c\x87\xa4\xe3\xe9\x14\xc2\xea\x04\x42\x5a\x1f\x2e\x4f\x20\x24\x6d\xf4\x26\x6e\xe5\x1e\xe2\x46\xe3\xe1\x42\x73\x8b\x94\xd9\xe3\xb0\x1a\xd7\xb2\xcb\x31\x84\x55\xdc\x97\x65\xcc\x82\xdb\xe4\xe2\x50\x5d\xa1\x3e\x9c\x29\x25\xc0\x58\x66\x91\x98\x30\x9e\x31\xca\x2e\xb8\x2c\x04\x4f\xb8\x85\xd8\xf9\x19\x2c\xcb\x3c\xc5\x3b\xb0\xe5\x15\xb8\x03\x02\x1f\xa3\x28\xba\xee\x30\x54\xbf\xf7\xaf\xfc\xa1\x74\x4f\xce\x74\xd9\x1b\xd7\x2d\x5c\x08\x47\x1f\xe0\xba\x45\x4b\xec\x23\x16\xe1\x51\x4b\xf2\xfa\x91\x8f\xde\xd5\xd3\x8f\xd7\x8f\x5a\x47\xb0\x7e\x4c\x74\xef\x0e\x7d\x23\xdd\x85\xa7\x37\x5e\xc5\x56\x0f\xac\x7b\x55\x48\xd1\xe5\x35\x94\x2e\xcf\x50\x8a\x98\x0b\x96\xc5\xb0\x9a\xb8\x0a\x45\x8d\x82\xde\x3e\xfe\x74\xa8\x9f\xd1\x09\x1a\x11\x46\xf4\xad\x52\x62\x10\xcc\x82\xb1\x8f\xba\x31\x04\x33\x48\x55\x62\x82\x6e\xa5\xbe\x62\x1a\x66\x40\x27\xe1\x04\xd6\x2b\x7f\x61\x7a\xf0\x70\x46\x8b\x36\x01\x38\xa7\x91\xec\x4b\xb2\xbf\xcf\x67\x0d\x5b\xc2\xd1\x87\x61\x23\xc4\x3b\x24\x50\x47\xe3\x73\x45\xae\x8c\x75\xe5\x4f\x54\xd4\xb2\xa0\xd6\x4a\x9f\xc0\x3a\x2d\xfb\x38\x6e\x1a\xda\xf2\xa6\x57\xf8\xb2\xf4\xad\xfd\x3d\x28\x5d\x41\x6f\x56\xfc\xbd\x50\xcc\x7e\xfd\xe5\x3d\xe8\xad\x91\x37\xab\x7d\x25\xed\x3d\xa8\x7c\x25\xed\x56\x75\xf7\xb2\x47\x87\xbb\x59\xe5\xaa\xd4\xde\xb9\x4e\x0f\xbc\x59\xe9\x3b\x7e\x2f\xbc\x12\xec\x76\x85\xf7\xc2\xac\x07\xf6\x4a\xb7\xf7\x9f\x79\x61\x2b\xf0\x5d\x11\x24\x17\x98\x5c\xd6\x15\xa1\xae\xc5\x54\x6f\x2c\x4a\xc8\x29\xd7\xf0\x94\xab\x9c\x59\x4e\x63\x47\xf5\xb9\xc3\x04\x55\x75\x53\xb7\x25\x9d\xe2\xe0\xfa\xf4\xc0\xa7\x18\x67\x90\x77\xd0\x19\x35\xe7\x9f\x6a\x59\xcc\x10\xfe\xcf\x37\x12\x9f\xd5\xf3\x05\xab\xec\x1e\x87\x61\xec\xb3\x79\x1c\x1a\x82\xfa\x3d\xf8\x3d\xa0\x62\xba\x41\xd1\xf4\xee\x14\x4d\x6f\x14\x6d\xf5\x8d\xc6\xb4\x94\x29\x93\x96\xdc\x7b\x85\xda\x4f\x09\x33\xb4\x0b\x44\xb9\xf2\x19\x93\x29\xbc\x3f\x9f\x55\x76\x97\x32\x9d\xa8\xa2\x1a\xcc\xc6\xf5\x82\x81\x19\x76\x0b\xc3\x4a\xc0\xd4\x09\xdf\x2b\xf9\x8d\xa4\x4d\x9f\x2b\xdc\xba\xf0\xc3\x1a\x39\x34\xc3\xc6\x69\x76\xcd\x8b\xe1\x79\x21\xf8\xbc\x82\xf8\x46\x26\xa6\x91\x29\x0e\x4d\x7f\xf3\xe2\x6c\x30\xd1\x2b\x99\xe2\xd2\x8f\xbc\x5b\x07\x23\x37\x0d\x75\x4b\x67\x63\x12\xea\xb6\x2d\x4d\xe8\x81\xff\x36\x58\x0e\xc7\x50\x75\x89\x71\x0c\xd4\x72\xcb\xf5\x36\xab\xe1\xdd\x4e\x3f\xc7\x5f\x7d\xf3\xf5\x97\x9e\x79\x4e\xaa\x5e\xd0\x76\x7a\xfb\xa3\x4d\x1b\x08\x69\x07\x61\xd5\xbd\xc6\x58\x06\xe7\xd1\xcf\xa5\x46\x78\xf8\x10\xf2\xf7\x41\x55\x7f\xdd\x75\x12\x6a\x32\x10\xde\x50\x10\x56\xc3\xde\x49\x88\x36\x43\xb5\xb3\xe9\xb8\x3a\xb7\xd4\x91\x91\x7a\x7c\x77\xc6\x25\x47\x9a\x57\x17\x9a\x15\xc5\xed\x1e\x68\xd3\x91\x5e\x64\xd1\x8b\x34\x1d\x1c\x3e\xe9\x7a\x6c\x91\x45\x2f\x95\xc4\xd5\x8d\x6e\x0d\xf9\x7d\x29\x7b\x09\x0d\x6f\xf0\x3a\xf4\x2d\xb2\x56\xa8\x57\x32\x89\x7e\x65\xdc\xfe\xa0\x55\x59\x74\x42\x9e\x8e\xe4\xfa\x9d\xb3\x02\xfc\x15\x03\xa5\x71\xca\x03\xed\xf4\x12\xce\xca\x79\x74\xa6\x4b\x99\x30\x8b\x83\xa3\xae\xe2\x59\x39\x6f\x6a\xf6\x7e\xf8\xb6\x9c\xcf\x51\x6f\xd0\xeb\x5f\x44\xa7\x68\xd0\xf6\x6a\x75\x97\x19\xff\x64\x32\x15\x35\x2b\xf5\xed\x86\xfd\x5e\x95\x32\x6d\x46\x2f\xc1\xb6\x5e\xd6\xab\x7a\xe1\x57\x27\xf3\x6d\x21\xb8\xfd\xd1\xe5\x06\xfa\xf3\xbc\x36\x91\x5b\x82\xb7\x21\x6f\x23\x9e\xfa\x63\xb3\x86\xec\x87\xad\xa5\x5f\x08\xb1\x0b\xf6\x1b\x56\x0c\x4a\xc9\x69\x94\x8c\xce\xd4\x19\xb7\x02\x49\xc1\x36\xf0\x5a\xa4\x97\x08\xef\xaf\x9a\x86\x9b\xdc\x1b\x44\xc1\x70\x93\xdd\x0d\xf1\x3e\x83\xbd\xd8\x6e\x54\xb4\x64\x3f\x41\x84\x97\x6d\xd3\xf0\x8e\x02\x67\x13\x0d\x5e\xb8\x16\xf8\x5c\xd4\xd7\x6a\xd1\x8f\xea\x04\x3e\x17\x75\xab\xcb\x56\xa8\x9f\x76\x58\xaa\xd9\x22\x7a\xa9\xd9\xe2\x0d\x33\x97\x2d\x6a\xe9\x4f\x72\x31\x06\x9e\xb3\x0c\xa3\x9f\x69\x52\xfb\x78\xbd\xd2\xd6\x09\xc4\x35\xcc\x6d\x65\x5b\x93\x65\xac\x31\xc3\x65\x11\x7d\xa7\xf2\x82\x0b\x1c\xc5\x3d\xf9\x72\x25\xfb\xa6\x34\x76\x2d\xbf\x43\xc2\xd4\x58\xdf\xe8\xb5\x75\x0d\x02\xca\xfd\x16\x0a\x66\x2d\x6a\x79\x6b\x64\xd4\xd8\x58\xd3\xd0\x79\x7b\x9d\x4b\xb7\x5e\x90\xe4\xfa\xb2\x6d\xc7\x84\xb0\x60\xb6\x9b\xfd\x0a\x66\x83\xf3\xe8\x3b\xd2\xd1\xaa\x54\x54\x5b\x5b\x9a\xeb\xfb\x53\xc2\x18\xbb\xfb\x8c\xdb\xb6\xc6\x2d\x3f\xb7\x95\xff\xfc\xd3\xdb\x57\xbf\xdd\xbb\x05\x4e\x4b\x5f\xb9\x6c\xfc\x22\xd3\xae\x9c\xbb\x5e\x07\x74\xb3\xa4\x19\xc3\x5c\xab\x7c\x0c\x56\x8d\xe1\xa8\xeb\xd5\x5e\x69\xaa\xa9\xab\x5f\x43\xbf\x63\x42\xec\xd2\x88\x6c\xca\x48\xe1\xbf\x50\xab\x2e\xab\xf4\x2c\x38\x8f\x7e\x61\xa2\x44\x37\xcb\xfa\xf6\x7a\xdb\xcf\x53\x4c\x67\x70\x34\x86\x42\xab\x19\x9b\x89\x0a\x72\xa4\xbe\xf8\xf0\x49\x3c\x8c\xfc\x0f\x29\x1e\x6f\xb7\x14\xf9\x5f\x35\xe8\xd3\x35\xf1\x6f\xe5\xe7\xef\xb4\xa5\x61\x0c\x35\x67\x32\x1d\xb4\xf2\x76\x2c\xd5\xa1\x2a\xc0\xbf\x72\x51\xd0\x04\xf5\xbf\x0b\x93\xb2\xd2\x5d\x64\xf6\x45\xd5\xcd\xcd\x6f\xbb\x03\xad\x67\x12\x8e\x29\xcc\xaa\x7a\x76\xbe\x91\xad\x7f\x2e\x56\x3b\xf5\xa1\x4b\x98\xc2\x12\x46\x70\xdc\x89\xb0\x25\x8c\xa6\x70\xec\xe3\xc8\x43\xff\xd4\x7f\x27\xec\xaf\x74\xe1\x31\x10\x5f\xb7\x9a\xf7\x9b\xa2\xb6\x69\xae\x5c\x3e\x7e\xdc\x2e\x91\x2b\xb4\xc3\xbd\xd0\x0e\x0f\xbb\x9d\xea\xda\xb8\xb0\xda\x03\x0f\x1e\x4f\xeb\x9b\xea\x4d\x16\xee\x07\x79\xb8\x82\xdc\x80\x39\xda\x13\x73\xb4\xdd\xcc\xc9\x9e\x90\x93\xed\x90\x5f\xec\x09\xf9\xc5\x76\xc8\x87\x7b\x42\x3e\xdc\x0e\xf9\xd7\x9e\x90\x7f\x6d\x87\xfc\x63\x4f\xc8\x3f\xb6\x43\x3e\x7b\xb6\x27\xe6\xb3\x67\xdb\x41\x9f\x3f\xdf\x13\xf4\xf9\xf3\x1e\x17\xed\xbb\xfb\x87\xeb\xed\x5f\x1f\xfc\x3b\x00\x00\xff\xff\xce\x6b\xb5\xe5\xa6\x25\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 9638,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1622918409, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
