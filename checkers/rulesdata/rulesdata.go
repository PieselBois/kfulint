// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x73\xdb\x36\x12\xfe\x1c\xff\x8a\x3d\x0e\xeb\x50\x8a\x4c\x39\x9e\xb6\xd3\x89\xad\xdc\xa4\xf1\x25\xe7\x99\xa4\xcd\xd8\x4e\xdb\x99\xd4\x0d\x21\x72\x45\x61\x0c\x02\x2c\x5e\x2c\xf1\x52\xff\xf7\x1b\x10\x94\x4c\xd2\x22\xa3\x68\xe2\xeb\x7d\xf0\x58\x24\x16\xcf\x2e\x9e\xc5\xbe\x00\xcc\x49\x7c\x4d\x52\x84\x54\x48\xc3\x50\xed\xed\xd1\x2c\x17\x52\x43\xb0\xf7\xc8\x4b\xa9\x9e\x9b\x69\x18\x8b\x6c\xfc\xa7\x21\x8a\xb2\x42\xe3\x38\x15\x07\x56\x32\x35\x44\x26\xe3\x44\x31\x6f\x6f\xb0\xb7\x37\x1e\x27\x22\x7e\xa6\x4c\x96\x11\x59\xc0\x29\x6a\x8c\xb5\x02\x65\x54\x4e\x63\x2a\x8c\x82\xcc\x68\x5c\x02\x13\xf1\xf5\xd8\x70\xfb\x0f\x44\x8e\x92\x68\x2a\xb8\xaa\x66\x6b\x92\x2a\x00\x80\x84\x92\x94\x0b\xa5\x69\x0c\xb8\xcc\x51\xd2\x0c\xb9\x26\xac\x92\x9a\xe2\x4c\x48\x04\xc8\x4c\xf8\x46\xc4\xd7\xc1\xe0\xd8\xfe\x7c\x5f\x62\x06\x83\x4a\x88\xcc\x34\x4a\x68\x08\x25\x38\x43\xd9\x10\x9d\x19\x1e\xc3\x94\x24\xa5\x44\x06\x89\x62\xe1\x5b\xa2\xe3\x39\xca\x01\x7c\xda\x7b\x94\xb9\xa7\x20\xf2\x33\xf3\x74\x0d\xe3\x67\xe6\x68\x0d\x11\x0d\xc2\xbd\x47\x8f\x7e\x9d\xa3\xc4\x20\xfb\xe0\x65\xe6\xa9\x77\x15\x5e\xe2\x52\xc3\x64\x02\xe5\x8b\xa3\xea\x45\x29\x78\x8e\x96\xd9\x20\x72\xa6\x50\x05\x19\x55\x8a\xf2\x74\x54\xb1\x43\x15\x38\x6e\x30\x01\x9a\x65\x98\x50\xa2\x91\x15\x4e\xcb\x0b\x1d\xac\x10\x07\x7b\x6d\xeb\xce\x1b\xe6\x9d\xff\xdf\xd9\xd7\x74\xc2\x57\x31\xb2\xb6\xb7\x9c\x51\x23\xc8\x48\x31\x45\x70\xb8\xb0\x20\x0a\x28\xd7\xc8\x13\x4c\xfe\xf9\x25\x14\xd6\x6c\x7c\x28\x13\xcf\xb7\xb4\xf1\xb6\x2b\xb0\x38\x65\x60\x14\x49\xd1\xce\x87\xb9\xd6\x79\xf8\x13\x2e\xce\xf1\x4f\x83\x4a\x43\x4c\x18\x53\x23\x50\x26\x4d\x51\x69\xca\xd3\x4a\x42\xfc\x28\x92\x02\x88\x02\xc2\x81\x30\x8d\x92\x13\x4d\x6f\xb0\x15\x7e\x4a\x17\x0c\xfb\x22\xaf\xa5\x2e\xf0\x5e\xff\xeb\xd2\x1b\x81\x91\x6c\x64\x0d\x6b\xc7\x60\x9f\x78\xcd\xae\x2a\x1e\xed\x1b\xf7\xa2\x27\x24\xbd\x36\xa6\x9f\xa1\x9e\x8b\x64\x04\x7e\x09\xeb\x5b\x33\xbc\xa6\xd3\x38\x65\x35\xa7\x95\x8f\xa5\xc0\x85\x63\xe9\xb3\x98\x75\x53\xbd\xba\x9b\xbd\x3a\xb9\x6a\x2e\x0c\x4b\x60\x8a\x90\x4b\xbb\x8f\x24\x26\xa0\x05\xe8\x39\x96\x3e\x93\x95\x87\xa6\x22\x29\xbc\x1e\xff\xe2\x32\x97\xa8\x94\x4d\x8e\xc0\xe8\x35\xc2\x87\x2b\x69\x38\x06\x6a\xf0\xe1\xf0\x0a\xf4\x9c\x68\xbb\x93\x20\x26\x46\x21\x18\xbe\x20\x5c\x63\x02\x56\x04\x14\xa3\x31\x02\x61\x4c\xc4\x65\x76\x6d\x79\x37\x47\x39\x13\x32\x23\x3c\xee\xf5\xb1\x84\x67\x93\x86\xd2\x96\x53\xe5\x08\x3e\x5a\x11\xa3\x67\x3f\x84\xa7\x18\x8b\x04\xcf\x0d\xc7\x33\x7e\xa1\x25\xe5\x69\xa0\x56\xbb\x80\x0b\x8d\x56\xef\x05\x22\xbc\x16\x40\x95\x32\x08\x33\x21\x21\x41\x4d\x28\x53\xcf\x4a\x62\xd5\xb3\xf1\xb8\x56\x6c\x52\xc1\x08\x4f\xc7\xa9\x18\x97\xf2\x6a\xfc\xed\x77\x47\xdf\x1f\xba\x0d\xe2\x78\xbd\x53\xd9\x97\xb9\xab\x05\xf8\xe5\x0a\x5a\x41\xac\xec\x6e\x28\x72\x0c\xcf\x54\x10\xa9\xd2\xea\x68\xd0\x08\xdf\x58\x70\x45\x13\x94\x20\x31\x67\x24\xb6\x71\xe4\xfb\xb0\xa0\x7a\xde\xb9\x6c\x5f\x0d\xa2\x1e\xb7\x96\x21\x0b\x62\x06\x11\x43\x1e\xc1\x62\x8e\x1c\x24\x2a\xc3\xb4\xcd\xad\x62\x7a\x53\xe6\x0a\x4b\x8e\x40\xc5\x1f\x5b\x27\x5f\x23\x28\xe4\x6a\x63\x90\xb6\x7c\xc6\x90\x07\x44\xca\x01\x9c\x4c\xe0\xb0\xe5\xaf\xf5\xd8\xc4\x8e\x95\x44\x2a\x26\xf2\xbc\x78\x83\xbc\x8f\x41\x3b\xcf\xff\x38\x80\xe7\x13\x38\x8c\x06\xe1\x8a\x1a\xdf\xb7\x06\x13\xb6\x20\x85\x02\x2d\x0d\x46\x83\x0d\x93\x4e\xba\xe7\xcc\x08\x53\x1b\x26\x2d\x9d\xf1\xcd\x59\x31\xe1\x36\xa0\x56\x02\x93\x52\xa0\x9b\xe4\x1b\xc2\x0c\x82\x5a\x90\x3c\xb7\x2e\xb3\x3e\x72\x11\x43\x24\x02\x17\x1a\x8c\xad\x69\x90\x13\x49\x18\x43\x06\x44\x29\x9a\x72\x1b\x05\x5b\x70\x3c\xd4\x59\x0e\x13\x18\x2e\x8f\x61\xb8\xb4\x3f\x8a\x63\x18\x16\xf6\x87\xce\xf2\x16\xe7\xc3\xe5\xa8\x1a\x2b\x46\x30\x5c\x3a\xd6\x6f\x08\xbb\x58\x90\xbc\xb7\xdf\xb0\x3a\x9e\x4d\xc0\x2f\x8e\xc1\xb7\xf3\xfd\xe5\x31\xf8\x56\x9b\x1d\x89\x1a\xb9\xc7\x72\x23\xf1\x60\x21\xa9\x46\x9b\xd9\x23\xbf\x18\x55\xb2\xcb\x11\xf8\x45\xd4\x97\x65\xd4\x82\xea\x78\x7e\x20\x6e\x50\x1e\x4c\x85\x60\xa0\x34\xd1\x68\x99\x50\x8e\x31\x9b\x5d\x70\x99\x33\x1a\x53\x0d\x51\xe9\x67\xd0\x24\x75\x14\x6f\xc1\x96\x53\x50\x6e\x10\xf8\x14\x86\xe1\x6d\x8b\xa1\x6a\xdc\x0d\xb9\x4d\x59\xbe\xb9\x94\xa6\x37\xae\x1b\xb8\xe0\x0f\x3f\xc2\x6d\x83\x96\xc8\x45\x2c\xc2\xe3\x86\xe4\xed\x63\x17\xbd\xab\xb7\x9f\x6e\x1f\x37\xb6\x60\xf5\xda\xd2\xbd\x3d\xf4\x9d\x74\x1b\xde\x8e\x38\x15\x9d\x1e\x58\x77\x51\x90\x60\x99\xd7\x90\x97\x79\xc6\xa6\x88\x19\x23\x69\x04\xab\xf6\x3c\x17\xb6\x51\x90\xdd\xbd\x72\x8b\xfa\xa9\xdd\x41\x43\x8b\x11\xfe\x28\x04\x0b\xbc\xa9\x37\x72\x51\x37\x02\x6f\x0a\x89\x88\x95\xd7\xae\xd4\x37\x44\xc2\x14\xec\x4e\x38\x86\xf5\xcc\x5f\x88\x0c\xf6\xa7\x76\xd2\x26\x80\xd2\x69\x56\xf6\xd4\xda\xdf\xe7\xb3\x9a\x2d\xfe\xf0\xe3\xa0\x16\xe2\x2d\x12\x6c\x47\xe3\x72\x45\x26\x94\x2e\xcb\x1f\x2b\x6c\xcb\x82\x52\x0a\x79\x0c\xeb\xb4\xec\xe2\xb8\x6e\x68\xc3\x9b\x4e\xe1\xa9\x71\x87\x8c\x07\x50\xba\x82\xde\xac\xf8\x15\x13\x44\x7f\xff\xed\x03\xe8\xad\x90\x37\xab\x3d\xe3\xfa\x01\x54\x9e\x71\xdd\xa9\xee\x41\xd6\x58\xe2\x6e\x56\xb9\x2a\xb5\x5f\x5d\xa7\x03\xde\xac\xf4\x3d\x7d\x10\x5e\x2d\x6c\xb7\xc2\x07\x61\xd6\x01\x3b\xa5\xdd\xfd\x67\x96\xeb\x02\x5c\x57\x04\xf1\x1c\xe3\xeb\xaa\x22\x54\xb5\xd8\xd6\x1b\x8d\x1c\x32\x9b\x6b\x68\x42\x45\x46\x34\xb5\xc7\x8e\xe2\x4b\x0f\x13\xb6\xaa\xab\xaa\x2d\x69\x15\x87\xb2\x4f\xf7\x5c\x8a\x29\x0d\x72\x0e\xba\xb4\xcd\xf9\xe7\x5a\x16\x35\x80\x7f\xb8\x46\xe2\x8b\x7a\x3e\x6f\x95\xdd\x23\xdf\x8f\x5c\x36\x8f\x7c\x65\xa1\x7e\xf7\x7e\xf7\x6c\x31\xdd\xa0\x68\xf2\xf5\x14\x4d\xee\x14\x75\xfa\x46\x62\x62\x78\x42\xb8\xb6\xee\xbd\x41\xe9\x4e\x09\x53\xd4\x0b\x44\xbe\xf2\x19\xe1\x09\x7c\xb8\x9a\x16\x7a\x9b\x32\x1d\x8b\xbc\x08\xa6\xa3\x6a\x42\xa0\x06\xed\xc2\xb0\x12\x50\x55\xc2\x77\x4a\x7e\xb3\xd2\xaa\xcf\x15\xe5\x3c\xff\xe3\x1a\xd9\x57\x83\xda\x6e\x2e\x9b\x17\x45\xb3\x9c\xd1\x59\x01\xd1\x9d\x4c\x64\x8f\x4c\x91\xaf\xfa\x9b\x97\xd2\x06\x15\x9e\xf1\x04\x97\xee\xc8\xdb\x79\x30\x2a\x4f\x43\xed\xd2\x59\x3b\x09\xb5\xdb\x96\x3a\x74\xe0\x9e\x82\xe5\x60\x04\x45\x9b\x98\x92\x81\x4a\x6e\xb9\x5e\x66\x31\xf8\xba\xa7\x9f\xa3\xef\x7e\xf8\xfe\x5b\xc7\x3c\xb5\xaa\x5e\xd8\xe5\xf4\xf6\x47\x9b\x16\xe0\xdb\x15\xf8\x45\xfb\x32\x63\xe9\x5d\x85\xef\x8c\x44\xd8\xdf\x87\xec\x83\x57\x54\x8f\xdb\x9e\x84\xea\x0c\xf8\x77\x14\xf8\xc5\xa0\xf7\x24\x64\x17\x63\x6b\x67\xdd\x71\x55\x6e\xa9\x22\x23\x71\xf8\xe5\x1e\xe7\x14\xed\x79\x75\x21\x49\x9e\xdf\xef\x81\x36\x6d\xe9\x45\x1a\xbe\x48\x92\xe0\xe0\x69\xdb\x63\x8b\x34\x3c\x15\x1c\x57\xd7\x7f\x15\xe4\x2b\xc3\x7b\x09\xf5\xef\xf0\x5a\xf4\x2d\xd2\x46\xa8\x17\x3c\x0e\x7f\x25\x54\xbf\x96\xc2\xe4\xad\x90\xb7\x5b\x72\x3d\x56\x5a\x01\xee\x8a\xc1\xa6\x71\x9b\x07\x9a\xe9\xc5\x9f\x9a\x59\x78\x29\x0d\x8f\x89\xc6\xe0\xb0\xad\x78\x6a\x66\x75\xcd\xce\x0f\x3f\x9a\xd9\x0c\xe5\x06\xbd\x6e\x20\x3c\x47\x85\xba\x57\x6b\x79\x99\xf1\x6f\xc2\x13\x56\xb1\x52\xdd\x6e\xe8\x57\xc2\xf0\xa4\x1e\xbd\x16\xb6\x31\x58\xcd\xea\x85\x5f\xed\xcc\x8b\x9c\x51\xfd\x53\x99\x1b\xec\x9f\xe3\xb5\x8e\xdc\x10\xbc\x0f\x79\x1f\xf1\xdc\x6d\x9b\x35\x64\x3f\x6c\x25\xfd\x82\xb1\x6d\xb0\xdf\x92\x3c\x30\x9c\xda\xa3\x64\x78\x29\x2e\xa9\x66\x68\x15\x74\x81\x57\x22\xbd\x44\x38\x7f\x55\x34\xdc\xe5\x5e\x2f\xf4\x06\x9b\xec\xae\x89\xf7\x19\xec\xc4\xb6\xa3\xa2\x21\xfb\x19\x22\x9c\x6c\x93\x86\xf7\x36\x70\x36\xd1\xe0\x84\x2b\x81\x2f\x45\x7d\x23\x16\xfd\xa8\xa5\xc0\x97\xa2\x76\xba\x6c\x85\xfa\x79\x87\x25\x92\x2c\xc2\x53\x49\x16\x6f\x89\xba\x6e\x50\x6b\xff\x38\x65\x23\xa0\x19\x49\x31\x7c\x67\x4f\x6a\x9f\x6e\x57\xda\x5a\x81\xb8\x86\xb9\xaf\xac\x33\x59\x46\x12\x53\x5c\xe6\xe1\x4b\x91\xe5\x94\xe1\x30\xea\xc9\x97\x2b\xd9\xb7\x46\xe9\xb5\xfc\x16\x09\x53\x62\x75\xa3\xd7\xd4\x15\x78\x36\xf7\x6b\xc8\x89\xd6\x28\xf9\xbd\x23\xa3\xc4\xda\x9c\x9a\xce\xfb\xf3\xca\x74\xeb\x04\xad\x5c\x5f\xb6\x6d\x99\xe0\xe7\x44\xb7\xb3\x5f\x4e\xb4\x77\x15\xbe\xb4\x3a\x1a\x95\xca\xd6\xd6\x86\xe6\xea\xfe\xd4\x62\x8c\xca\xfb\x8c\xfb\xb6\x46\x0d\x3f\x37\x95\xbf\xfb\xf9\xe2\xec\xb7\x07\xb7\xa0\xd4\xd2\x57\x2e\x6b\x5f\x12\x9a\x95\x73\xdb\xeb\x80\x76\x96\x54\x23\x98\x49\x91\x8d\x40\x8b\x11\x1c\xb6\xbd\xda\x2b\x6d\x6b\xea\xea\xd3\xd9\x4b\xc2\xd8\x36\x8d\xc8\xa6\x8c\xe4\xff\x07\xa5\x68\xb3\x6a\xdf\x79\x57\xe1\x2f\x84\x19\x2c\xcf\xb2\xae\xbd\xee\xfa\xac\x42\x64\x0a\x87\x23\xc8\xa5\x98\x92\x29\x2b\x20\x43\xdb\x17\x1f\x3c\x8d\x06\xa1\xfb\x90\xe2\xf0\xb6\x4b\x91\xff\x53\x83\x3e\x5f\x13\xff\x56\x7e\xfe\x4e\x5b\x6a\xc6\xd8\xe6\x8c\x27\x41\x23\x6f\x47\x5c\x1c\x88\x1c\xdc\x50\x19\x05\x75\x50\xf7\xc5\xd2\x2a\x33\xe5\x45\x66\x5f\x54\xdd\xdd\xfc\x36\x3b\xd0\xea\x4c\x42\x31\x81\x69\x51\x9d\x9d\xef\x64\xab\x0f\xd7\x62\xab\x3e\x74\x09\x13\x58\xc2\x10\x8e\x5a\x11\xb6\x84\xe1\x04\x8e\x5c\x1c\x39\xe8\x9f\xfb\xef\x84\xdd\x95\x2e\x3c\x01\xcb\xd7\xbd\xe6\xfd\xae\xa8\x6d\x3a\x57\x2e\x9f\x3c\x69\x96\xc8\x15\xda\xc1\x4e\x68\x07\x07\xed\x4e\x75\x6d\x9c\x5f\xec\x80\x07\x4f\x26\xd5\x4d\xf5\x26\x0b\x77\x83\x3c\x58\x41\x6e\xc0\x1c\xee\x88\x39\xec\x36\x73\xbc\x23\xe4\xb8\x1b\xf2\x9b\x1d\x21\xbf\xe9\x86\xdc\xdf\x11\x72\xbf\x1b\xf2\xaf\x1d\x21\xff\xea\x86\xfc\x63\x47\xc8\x3f\xba\x21\x4f\x4e\x76\xc4\x3c\x39\xe9\x06\x7d\xfe\x7c\x47\xd0\xe7\xcf\x7b\x5c\xb4\xeb\xea\xf7\xd7\xcb\xbf\xdd\xfb\x6f\x00\x00\x00\xff\xff\x0b\x68\xbd\x8d\xd3\x23\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 9171,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1622917765, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
