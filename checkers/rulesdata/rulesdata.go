// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6f\x73\xdb\x36\xd2\x7f\x1d\x7f\x8a\x7d\x38\x6c\x42\x29\x32\xe5\x78\xda\x4e\x27\x8e\xf2\x4c\x1a\x5f\x7a\x99\x49\xda\x8e\xe3\x36\x9d\x49\xdd\x10\x22\x57\x34\xc6\x20\xc0\x02\xa0\x25\x5e\xea\xef\x7e\xb3\x04\x25\x93\xb4\xc8\x28\x3e\xfb\x7a\x2f\x32\xb1\x88\xc5\xef\xb7\xd8\xc5\xfe\x01\x90\xb3\xf8\x82\xa5\x08\xa9\xd2\x85\x40\xb3\xb7\xc7\xb3\x5c\x69\x0b\xc1\xde\x03\x2f\xe5\xf6\xbc\x98\x87\xb1\xca\xa6\x7f\x16\xcc\x70\x51\x5a\x9c\xa6\x6a\x9f\x24\xd3\x82\xe9\x64\x9a\x18\xe1\xed\x8d\xf6\xf6\xa6\xd3\x44\xc5\x4f\x4d\x91\x65\x4c\x97\x70\x8c\x16\x63\x6b\x20\xc1\x5c\x63\xcc\x2c\x26\xc0\xd5\x94\xab\xc2\x72\x01\x6b\xc2\xc2\xb0\x14\x4d\x3d\xd3\xb2\xd4\x00\x00\x18\x5b\x0a\x04\x5c\xe5\xa8\x79\x86\xd2\x32\x51\x0b\xcc\x71\xa1\x34\x02\x38\x90\xf0\x04\x59\xf2\x42\x88\x40\x8f\xea\x71\xb6\xb0\xa8\x81\xc6\x9b\x63\x8b\x42\xc6\xf5\x94\xe3\x8d\x2e\x41\x06\x89\x11\xe1\x5b\x66\xe3\x73\xd4\x23\xf8\xb4\xf7\x20\x73\xbf\x82\xa8\x03\xef\x7f\x1c\x45\xa3\x70\xef\xc1\x83\x13\x24\xa3\x74\xc7\x81\x37\xd7\x38\x81\xc2\x60\x43\x01\xe0\xd2\x58\x64\x49\x34\xda\xdb\xce\xf0\x8a\x0b\x1c\xa4\x20\x81\x6d\x1c\xca\x34\x86\x07\x48\xde\x6b\x6e\xb1\x66\x99\x80\xfb\xb7\x9d\x6d\x23\xd9\x43\xd7\x18\xff\xcc\xa2\x8e\xb9\x1e\x5c\xd3\x31\xd7\x03\x4b\xaa\x46\x07\x18\x7e\x54\xf9\x4b\xa1\x0c\xf6\x73\x6c\x24\x7a\x9c\xd3\x18\x1f\xe0\x39\xe6\x26\x66\x3a\xd9\xca\x50\x8f\xf5\xe0\x6f\x46\x37\xe8\x57\x7d\xe1\x61\x0a\x93\xf3\x98\xab\xc2\x40\x56\x58\x5c\x81\x50\xf1\xc5\xb4\x90\xf4\x1f\xa8\x1c\x35\xb3\x5c\xc9\x6e\x88\x24\x9c\xa5\x52\x19\xcb\xe3\xa1\x38\xc9\x8a\xf0\x8d\x8a\x2f\x82\xd1\x11\xfd\xf9\x4b\x85\x19\x74\x83\xa5\x21\x94\xe0\x02\x75\x4b\xb4\x8a\x9d\x39\x4b\x2a\x89\x9b\x21\x33\x9d\x42\x94\x15\x4f\x22\x60\x32\xa1\xbf\x0e\x23\x60\x1a\x81\x25\x09\x26\x60\x15\x64\xec\x02\x21\x57\xc6\xf0\xb9\x40\xd0\x95\x09\x81\x81\xe0\x12\x61\x79\x8e\x1a\x21\xca\x0e\x23\x32\x62\x61\x30\x81\x60\xc9\xed\x39\x30\xa7\x07\x79\x64\x3a\x05\xa9\xdc\xcf\x86\x7b\xfc\xac\x78\xb2\xd1\xd9\xcf\x8a\xc3\x8d\xbe\xce\x55\xef\x09\x39\xc8\x3e\x78\x59\xf1\xc4\x3b\x0b\x4f\x71\x65\x61\x36\x83\xea\xc3\x61\xfd\xa1\xe5\x53\xb7\x6e\x6e\x20\xe3\xc6\x70\x99\x4e\x6a\x57\x90\x5e\x15\x32\xe5\xae\x2c\xc3\x84\x33\x8b\xa2\x74\x2c\x2f\x6c\xb0\x46\x6c\x6d\x9e\x4a\xbb\x93\x96\x7a\x27\xff\x03\xfa\x4d\xa7\x90\xf0\xc5\x02\x35\x4a\x0b\xdd\xcd\xd5\x63\x5b\xc7\x7b\x27\x4b\x68\x6c\x73\xa7\xf2\x04\x32\x56\xce\x11\x1c\x2e\x2c\x99\x01\x2e\x2d\xca\x04\x93\xff\xff\x12\x03\x37\x74\xbc\x2f\x15\x4f\x76\xd6\x91\x8c\xac\x0a\xda\xeb\x34\x61\x17\xbb\xbe\xf9\x4f\x34\x76\xea\x6d\xd0\x9e\x6c\x2c\x70\x27\xe6\x3c\xb9\x5b\xdd\x4e\x76\x56\xae\x37\x57\x4a\x2e\xea\x8e\x01\xb8\x84\x73\x6b\xf3\xf0\x47\x5c\x9e\xe0\x9f\x05\x1a\x0b\x31\x13\xc2\x4c\xc0\x14\x69\x8a\xc6\x72\x99\xd6\x12\xea\x7b\x95\x94\xc0\x0c\x30\x09\x4c\x58\xd4\x92\x59\x7e\x89\x5f\xda\x74\x74\xe8\x02\xef\x87\x7f\x9c\x7a\x13\x28\xb4\x98\x90\x62\xdd\xb4\x3a\x24\xde\xd0\xab\x4e\xb1\xf4\xc5\x7d\x18\x68\x4c\xbc\x2e\xa6\x9f\xa1\x3d\x57\xc9\x04\xfc\x0a\xd6\x27\x35\xbc\xb6\xbb\x24\x17\x0d\x77\x55\x3f\x2b\x81\x77\xce\x4a\x9f\xc5\x6c\xaa\xea\x35\x1d\xec\x35\x8d\x6b\xce\x55\x21\x12\x98\x23\xe4\x9a\x3c\xae\x5d\xfa\xb7\xe7\x58\xf9\x4c\xd7\x1e\x9a\xab\xa4\xf4\x06\xfc\x8b\xab\x5c\xa3\x31\x94\x92\x40\xf0\x0b\x84\x0f\x67\xba\x90\x18\x98\xd1\x87\x83\x33\xb0\xe7\xcc\x52\x44\x42\xcc\xa8\xcc\x16\x72\xc9\x24\x75\x95\x24\x02\x46\xf0\x18\x81\x09\xa1\xe2\x2a\xa7\x75\xbc\x9b\xa3\x5e\x28\x9d\x31\x19\x0f\xfa\x58\xc3\xd3\x59\x8b\xb4\xe3\x54\x3d\x81\x8f\x24\x52\xd8\xc5\x77\xe1\x31\xc6\x2a\xc1\x93\x42\xe2\x6b\xf9\xce\x6a\x2e\xd3\xc0\xac\x77\x81\x54\x16\x89\xf7\x1d\x22\xfc\xa0\x80\x1b\x53\x20\x2c\x94\x86\x04\x2d\xe3\xc2\x3c\xad\x0c\x6b\x9e\x4e\xa7\x8d\xf6\x3a\x55\x82\xc9\x74\x9a\xaa\x69\x25\x6f\xa6\x5f\x7f\x73\xf8\xed\x81\xdb\x20\xce\xae\xd7\x94\x43\xfd\x6b\xbd\x00\xbf\x5a\x41\x27\x7c\x0d\xed\x86\x32\xc7\xf0\xb5\x09\x22\x53\x69\x1d\x8d\x5a\x81\x1b\x2b\x69\x78\x82\x9a\xca\xb5\x60\x31\xc5\x91\xef\x43\x55\x99\xfb\x96\xed\x9b\xd1\x50\x8b\x53\x85\x2c\xa8\x05\x44\x02\x65\x44\x85\x5f\x82\x46\x53\x08\x4b\x15\x4c\xcd\x2f\xab\x9c\x4b\xc6\x51\x68\xe4\x23\xeb\xda\x06\x83\xd2\x6c\x0d\xd2\x8e\xcf\x04\xca\x80\x69\x3d\x82\x67\x33\x38\xe8\xf8\x6b\x33\x36\xa3\xb1\xca\x90\x46\xa8\x3c\x2f\xdf\xa0\x1c\xb2\x20\xcd\xf3\x3f\x8e\xe0\xf9\x0c\x0e\xa2\x51\xb8\x36\x8d\xef\x93\xc2\x4c\x2c\x59\x69\xc0\xea\x02\xa3\xd1\x96\x49\xcf\xfa\xe7\x2c\x98\x30\x5b\x26\xad\x9c\xf2\xed\x59\x31\x93\x14\x50\x6b\x81\x59\x25\xd0\x6f\xe4\x4b\x26\x0a\x04\xb3\x64\x79\x4e\x2e\x23\x1f\xb9\x88\xa1\x86\x4c\x2a\x0b\x05\x75\x0e\x90\x33\xcd\x84\x40\x01\xcc\x18\x9e\x4a\x8a\x82\x1d\x6c\x3c\xb6\x59\x0e\x33\x18\xaf\x8e\x60\xbc\xa2\x3f\xca\x23\x18\x97\xf4\x87\xcd\xf2\x8e\xcd\xc7\xab\x49\x3d\x56\x4e\x60\xbc\x72\x56\xbf\x64\xe2\xdd\x92\xe5\x43\x36\xf7\x89\xe3\xe9\x0c\xfc\xf2\x08\x7c\x9a\xef\xaf\x8e\xc0\x27\x36\x1a\x69\x35\xe1\x1e\xd9\x46\xe3\xfe\x92\x0e\x24\x94\xd9\x23\xbf\x9c\xd4\xb2\xab\x09\xf8\x65\x34\x94\x65\xcc\x92\xdb\xf8\x7c\x5f\x5d\xa2\xde\x9f\x2b\x25\xc0\x58\x66\x91\x2c\x61\x9c\xc5\x28\xbb\xe0\x2a\x17\x3c\xe6\x16\xa2\xca\xcf\x60\x59\xea\x4c\xbc\x83\xb5\x1c\x41\xb5\x41\xe0\x53\x18\x86\x57\x1d\x0b\xd5\xe3\x6e\xc8\x6d\xca\xea\xcb\xa9\x2e\x06\xe3\xba\x85\x0b\xfe\xf8\x23\x5c\xb5\xcf\x26\x2e\x62\x11\x1e\xb5\x24\xaf\x1e\xb9\xe8\x5d\x7f\xfd\x74\xf5\xa8\xb5\x05\xeb\xcf\x64\xee\xdd\xa1\xaf\xa5\xbb\xf0\x34\xe2\x28\x7a\x3d\xb0\xe9\x55\x21\xc1\x2a\xaf\xa1\xac\xf2\x0c\xa5\x88\x85\x60\x69\xb4\xb9\x1f\xc8\x15\x35\x0a\xba\xff\xf8\xd3\x31\xfd\x9c\x76\xd0\x98\x30\xc2\xef\x95\x12\x81\x37\xf7\x26\x2e\xea\x26\xe0\xcd\x21\x51\xb1\xf1\xba\x95\xfa\x92\x69\x98\x03\xed\x84\x23\xd8\xcc\xfc\x95\xe9\xe0\xe1\x9c\x26\x6d\x03\xa8\x9c\x46\xb2\xc7\xa4\xff\x90\xcf\x1a\xba\xf8\xe3\xea\xb4\xba\x39\x48\xb6\x8d\x40\x1d\x8d\xcb\x15\x99\x32\xb6\x2a\x7f\xa2\xa4\x96\x05\xb5\x56\xfa\x08\x36\x69\xd9\xc5\x71\x53\xd1\x96\x37\x1d\xe1\x71\xe1\x5a\xfb\x7b\x20\x5d\x43\x6f\x27\x7e\x25\x14\xb3\xdf\x7e\x7d\x0f\xbc\x35\xf2\x76\xda\xd7\xd2\xde\x03\xe5\x6b\x69\x7b\xe9\xee\x65\x8d\x15\xee\x76\xca\x75\xa9\xbd\x73\x4e\x07\xbc\x9d\xf4\x17\x7e\x2f\x76\x25\xd8\x7e\xc2\x7b\xb1\xac\x03\x76\xa4\xfd\xfd\x67\x96\xdb\x12\x5c\x57\x04\xf1\x39\xc6\x17\x75\x45\xa8\x6b\x31\xd5\x1b\x8b\x12\x32\xca\x35\x3c\xe1\x2a\x63\x96\xd3\xb1\xa3\xfc\xd2\xc3\x04\x55\x75\x53\xb7\x25\x9d\xe2\x50\xf5\xe9\x9e\x4b\x31\x95\x42\xce\x41\xa7\xd4\x9c\x7f\xae\x65\x31\x23\xf8\x3f\xd7\x48\x7c\x51\xcf\xe7\xad\xb3\x7b\xe4\xfb\x91\xcb\xe6\x91\x6f\x08\xea\x77\xef\x77\x8f\x8a\xe9\x16\xa2\xd9\xdd\x11\xcd\xae\x89\x7a\x7d\xa3\x31\x29\x64\xc2\xa4\x25\xf7\x5e\xa2\x76\xa7\x84\x39\xda\x25\xa2\x5c\xfb\x8c\xc9\x04\x3e\x9c\xcd\x4b\xbb\x4b\x99\x8e\x55\x5e\x06\xf3\x49\x3d\x21\x30\xa3\x6e\x61\x58\x0b\x98\x3a\xe1\x3b\x92\xdf\x48\xda\x0c\xb9\xa2\x9a\xe7\x7f\xdc\x20\xfb\x66\xd4\xd8\xcd\x55\xf3\x62\x78\x96\x0b\xbe\x28\x21\xba\x96\x89\xe8\xc8\x14\xf9\x66\xb8\x79\xa9\x74\x30\xe1\x6b\x99\xe0\xca\x1d\x79\x7b\x0f\x46\xd5\x69\xa8\x5b\x3a\x1b\x27\xa1\x6e\xdb\xd2\x84\x0e\xdc\xaf\x60\x35\x9a\x40\xd9\x35\x4c\x65\x81\x5a\x6e\xb5\x59\x66\x39\xba\xdb\xd3\xcf\xe1\x37\xdf\x7d\xfb\x75\x7d\x7b\x4f\x54\x2f\x68\x39\x83\xfd\xd1\xb6\x05\xf8\xb4\x02\xbf\xec\x5e\x63\xac\xbc\xb3\xf0\xe7\x42\x23\x3c\x7c\x08\xd9\x07\xaf\xac\x7f\xee\x7a\x12\x6a\x5a\xc0\xbf\x36\x81\x5f\x8e\x06\x4f\x42\xb4\x18\xaa\x9d\x4d\xc7\xd5\xb9\xa5\x8e\x8c\xc4\xe1\x57\x7b\x5c\x72\xa4\xf3\xea\x52\xb3\x3c\xbf\xd9\x03\x6d\xdb\xd2\xcb\x34\x7c\x91\x24\xc1\xfe\x93\xae\xc7\x96\x69\x78\xac\x24\xae\x6f\x74\x6b\xc8\x57\x85\x1c\x34\xa8\x7f\x8d\xd7\x31\xdf\x32\x6d\x85\x7a\x29\xe3\xf0\x3d\xe3\xf6\x07\xad\x8a\xbc\x13\xf2\xb4\x25\x37\x63\x95\x16\xe0\xae\x18\x28\x8d\x53\x1e\x68\xa7\x17\x7f\x5e\x2c\xc2\x53\x5d\xc8\x98\x59\x0c\x0e\xba\xc4\xf3\x62\xd1\x64\x76\x7e\xf8\xbe\x58\x2c\x50\x6f\xe1\x75\x03\xe1\x09\x1a\xb4\x83\xac\xd5\x65\xc6\x3f\x99\x4c\x44\x6d\x95\xfa\x76\xc3\xbe\x52\x85\x4c\x9a\xd1\x4b\xb0\xad\xc1\x7a\xd6\x20\xfc\x7a\x67\xbe\xcb\x05\xb7\x3f\x6e\x1e\x62\x9c\x5d\x9b\xc8\x2d\xc1\x9b\x90\x37\x11\x4f\xdc\xb6\x69\xbc\xed\x0c\xc1\xd6\xd2\x2f\x84\xd8\x05\xfb\x2d\xcb\x83\x42\x72\x3a\x4a\x86\xa7\xea\x94\x5b\x81\xeb\xc7\xa3\x6d\xe0\xb5\xc8\xa0\x21\x9c\xbf\x6a\x33\x5c\xe7\x5e\x2f\xf4\x46\xdb\xf4\x6e\x88\x0f\x29\xec\xc4\x76\x33\x45\x4b\xf6\x33\x86\x70\xb2\x6d\x33\xfc\x42\x81\xb3\xcd\x0c\x4e\xb8\x16\xf8\x52\xd4\x37\x6a\x39\x8c\x5a\x09\x7c\x29\x6a\xaf\xcb\xd6\xa8\x9f\x77\x58\xa2\xd9\x32\x3c\xd6\x6c\xf9\x96\x99\x8b\x96\x69\xe9\x9f\xe4\x62\x02\x3c\x63\x29\x86\x3f\xd3\x49\xed\xd3\xd5\xcd\xd7\xc5\x8a\x70\x03\x73\x93\xac\x37\x59\x46\x1a\x53\x5c\xe5\xe1\x4b\x95\xe5\x5c\xe0\x38\x1a\xc8\x97\x6b\xd9\xb7\x85\xb1\x1b\xf9\x1d\x12\xa6\xc6\xfa\x46\xaf\xcd\x15\x78\x94\xfb\x2d\xe4\xcc\x5a\xd4\xf2\xc6\x91\x51\x63\x63\x4e\x83\xf3\xe6\xbc\x2a\xdd\x3a\x41\x92\x1b\xca\xb6\x1d\x15\xfc\x9c\xd9\x6e\xf6\xcb\x99\xf5\xce\xc2\x97\xc4\xd1\xaa\x54\x54\x5b\x5b\xcc\xf5\xfd\x29\x61\xb8\x47\xc9\x9b\xba\xb6\x9f\x3c\xdb\xe4\x3f\xff\xf4\xee\xf5\x6f\xf7\xae\x41\xc5\xb2\xe3\xdb\x68\xbb\x72\xee\x7a\x1d\xd0\xcd\x92\x66\x02\x0b\xad\xb2\x09\x58\x35\x81\x83\xae\x57\x07\xa5\xa9\xa6\xae\x5f\x43\x5f\x32\x21\x76\x69\x44\xb6\x65\x24\xff\x5f\xa8\x55\xd7\xaa\xf4\xcd\x3b\x0b\x7f\x65\xa2\xc0\xea\x2c\xeb\xda\xeb\xbe\xe7\x29\xa6\x53\x38\x98\x40\xae\xd5\x9c\xcd\x45\x09\x19\x52\x5f\xbc\xff\x24\x1a\x85\xee\x21\xc5\xe1\xed\x96\x22\xff\xab\x0a\x7d\xbe\x26\xfe\xad\xf6\xf9\x3b\x75\x69\x28\x43\xcd\x99\x4c\x82\x56\xde\x8e\xa4\xda\x57\x39\xb8\xa1\x2a\x0a\x9a\xa0\xee\x5d\x98\xc8\x8a\xea\x22\x73\x28\xaa\xae\x6f\x7e\xdb\x1d\x68\x7d\x26\xe1\x98\xc0\xbc\xac\xcf\xce\xd7\xb2\xf5\x73\xb1\xda\xa9\x0f\x5d\xc1\x0c\x56\x30\x86\xc3\x4e\x84\xad\x60\x3c\x83\x43\x17\x47\x0e\xfa\xa7\xe1\x3b\x61\x77\xa5\x0b\x8f\x81\xec\x75\xa3\x79\xbf\x2e\x6a\xdb\xce\x95\xab\xc7\x8f\xdb\x25\x72\x8d\xb6\x7f\x2b\xb4\xfd\xfd\x6e\xa7\xba\x51\xce\x2f\x6f\x81\x07\x8f\x67\xf5\x4d\xf5\x36\x0d\x6f\x07\xb9\xbf\x86\xdc\x82\x39\xbe\x25\xe6\xb8\x5f\xcd\xe9\x2d\x21\xa7\xfd\x90\x5f\xdd\x12\xf2\xab\x7e\xc8\x87\xb7\x84\x7c\xd8\x0f\xf9\xd7\x2d\x21\xff\xea\x87\xfc\xe3\x96\x90\x7f\xf4\x43\x3e\x7b\x76\x4b\xcc\x67\xcf\xfa\x41\x9f\x3f\xbf\x25\xe8\xf3\xe7\x03\x2e\xba\xed\xea\x1f\x6e\x96\x7f\xb5\xf7\xef\x00\x00\x00\xff\xff\xaa\xa8\xdb\xbc\xc5\x28\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 10437,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1622920397, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
