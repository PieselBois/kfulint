// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6f\xdb\xb6\x16\xfe\xdc\xfc\x8a\x73\x05\x2d\x95\x5c\x5b\xce\x8a\xad\x18\x9a\xb8\x40\xdb\xdc\xf6\x06\x58\xb7\xa2\xc9\x5e\x80\x2e\xab\x68\xe9\x58\x26\x4a\x91\x1a\x49\xc5\xd6\xed\xf2\xdf\x2f\x48\xca\xb6\xa4\xd8\xaa\x6b\x34\x77\x1f\x02\xc4\xe2\xe1\x73\x0e\x9f\xc3\xf3\xc6\x82\x24\x1f\x49\x86\x90\x09\x59\x32\x54\x47\x47\x34\x2f\x84\xd4\x10\x1c\x3d\xf0\x32\xaa\xe7\xe5\x34\x4a\x44\x3e\xfe\xab\x24\x8a\xb2\x4a\xe3\x38\x13\x23\x23\x99\x95\x44\xa6\xe3\x54\x31\xef\x28\x3c\x3a\x1a\x8f\x53\x91\x3c\x55\x65\x9e\x13\x59\xc1\x39\x6a\x4c\xb4\x02\x4e\x19\x94\x8a\x64\xa8\x80\x72\x98\x6b\x5d\x44\x3f\xe1\xe2\x1d\xfe\x55\xa2\xd2\x90\x10\xc6\xd4\x10\x54\x99\x65\xa8\x34\xe5\x59\x2d\x21\x5e\x88\xb4\x02\xa2\x80\x70\x20\x4c\xa3\xe4\x44\xd3\x1b\xac\x75\x68\x92\x29\x00\x00\xa5\x2b\x86\x80\xcb\x02\x25\xcd\x91\x6b\xc2\x6a\x81\x29\xce\x84\x44\xe8\xaa\x0b\xbc\xd7\xff\xbe\xf2\x86\x50\x4a\x36\x34\x86\x85\xb5\x38\x99\x69\x94\xd0\x2f\xde\xb0\x2b\x3c\x9a\x95\x3c\xb1\x5f\xdc\x87\x20\x87\x54\xb1\xe8\x0d\xd1\xc9\x1c\x65\x08\x9f\x8e\x1e\xe4\xee\x57\xe0\x75\x31\xfd\x1c\xf5\x5c\xa4\x43\xf0\x2d\xac\x6f\xcc\xf0\xc2\xe8\xe8\xc1\x83\xdf\xe6\x28\x31\xc8\xdf\x7b\x9c\x32\xef\x3a\xba\xc2\xa5\x86\xc9\x04\xec\x4f\x2b\x70\xe9\x58\xfa\x2c\x66\xd3\x54\xb7\xf3\x1d\x1a\x7f\xae\x36\x3a\x72\xd5\x5c\x94\x2c\x85\x29\x42\x21\x71\x86\x52\x62\x0a\x5a\x80\x9e\xa3\xf5\x99\xac\x3d\x34\x15\x69\xe5\x85\x47\xb7\xbb\xfc\x8b\xcb\x42\xa2\x52\x54\x70\x05\x8c\x7e\x44\x78\x7f\x2d\x4b\x8e\x81\x0a\xdf\x9f\x5c\x83\x9e\x13\x0d\x39\xa9\x20\x21\xa5\x42\x28\xf9\x82\x70\x8d\x29\x18\x11\x50\x8c\x26\x08\x84\x31\x91\x10\x4d\x05\xef\x78\xb7\x40\x39\x13\x32\x27\x3c\xe9\xf5\xb1\x84\xa7\x93\x96\xd2\x8e\x53\xe5\x10\x3e\x18\x91\x52\xcf\x7e\x88\xce\x31\x11\x29\xbe\x2b\x39\x5e\xf0\x4b\x2d\x29\xcf\x02\xb5\xba\x05\x5c\x68\x34\x7a\x2f\x11\xe1\xb5\x00\xaa\x54\x89\x30\x13\x12\x52\xd4\x84\x32\xf5\xd4\x12\xab\x9e\x8e\xc7\x8d\x98\xc8\x04\x23\x3c\x1b\x67\x62\x6c\xe5\xd5\xf8\xbb\xef\x1f\x3f\x39\x71\x17\xc4\xf1\xba\x51\xd9\x73\x4d\xe2\xfa\x00\xbe\x3d\x41\xdc\xbe\x0f\xca\xdc\x86\xaa\xc0\xe8\x42\x05\xb1\xb2\x56\xc7\x61\xd3\xaf\x71\x22\xb8\xa2\x29\x4a\x90\x58\x30\x92\x98\x38\xf2\x7d\x58\x50\x3d\xdf\x79\x6c\x5f\x85\x71\x8f\x5b\x6d\xc8\x82\x98\x41\xcc\x90\xc7\xb0\x98\x23\x07\x89\xaa\x64\x1a\xa8\x02\x31\xbd\xa1\xa2\x54\x60\xc8\x11\xa8\xf8\x43\xe3\xe4\x8f\x08\x0a\xb9\xda\x1a\xa4\x1d\x9f\x31\xe4\x01\x91\x32\x84\xb3\x09\x9c\x74\xfc\xb5\x5e\x9b\x98\x35\x4b\xa4\x62\xa2\x28\xaa\x1f\x91\xf7\x31\x68\xf6\xf9\x1f\x42\x78\x36\x81\x93\x38\x8c\x56\xd4\xf8\xbe\x31\x98\xb0\x05\xa9\x14\x68\x59\x62\x1c\x6e\xd9\x74\xb6\x7b\xcf\x8c\x30\xb5\x65\xd3\xd2\x19\xdf\xde\x95\x10\x6e\x02\x6a\x25\x30\xb1\x02\xbb\x49\xbe\x21\xac\x44\x50\x0b\x52\x14\xc6\x65\xc6\x47\x2e\x62\x88\x44\xe0\x42\x43\xa9\xcc\xf7\x82\x48\xc2\x18\x32\x20\x4a\xd1\x8c\x9b\x28\xd8\x83\xe3\x81\xce\x0b\x98\xc0\x60\x79\x0a\x83\xa5\xf9\xa7\x3a\x85\x41\x65\xfe\xd1\x79\xd1\xe1\x7c\xb0\x1c\xd6\x6b\xd5\x10\x06\x4b\xc7\xfa\x0d\x61\x97\x0b\x52\xf4\x71\xee\x1b\x1d\x4f\x27\xe0\x57\xa7\xe0\x9b\xfd\xfe\xf2\x14\x7c\xa3\xcd\xac\xc4\xad\xdc\x63\xb8\x91\x38\x5a\x48\xaa\xd1\x64\xf6\xd8\xaf\x86\xb5\xec\x72\x08\x7e\x15\xf7\x65\x19\xb5\xa0\x3a\x99\x8f\xc4\x0d\xca\xd1\x54\x08\x06\x4a\x13\x8d\x86\x09\xe5\x18\x33\xd9\x05\x97\x05\xa3\x09\xd5\x10\x5b\x3f\x83\x26\x99\xa3\x78\x0f\xb6\x9c\x02\x7b\x41\xe0\x53\x14\x45\xb7\x1d\x86\xea\x75\xb7\xe4\x2e\xa5\xfd\x72\x25\xcb\xde\xb8\x6e\xe1\x82\x3f\xf8\x00\xb7\x2d\x5a\x62\x17\xb1\x08\x0f\x5b\x92\xb7\x0f\x5d\xf4\xae\xbe\x7e\xba\x7d\xd8\xba\x82\xf5\x67\x43\xf7\xfe\xd0\x1b\xe9\x2e\xbc\x59\x71\x2a\x76\x7a\x80\xe6\x39\xa6\x94\x68\x84\x14\x6d\x5e\x43\x6e\xf3\x8c\x49\x11\x33\x46\xb2\x18\x56\x5d\x44\x21\x28\xd7\x28\x55\x87\xf5\x94\x92\x8c\x0b\xa5\x69\xd2\xa1\x7e\x6a\x6e\xd0\xc0\x60\x44\x2f\x84\x60\x81\x37\xf5\x86\x2e\xea\x86\xe0\x4d\x21\x15\x89\xf2\xba\x95\xfa\x86\x48\x98\x82\xb9\x09\xa7\xb0\xde\xf9\x2b\x91\xc1\xf1\xd4\x6c\xda\x06\x60\x9d\x66\x64\xcf\x8d\xfd\x7d\x3e\x6b\xd8\xe2\x0f\x3e\x84\x8d\x10\xef\x90\x60\x3a\x1a\x97\x2b\x72\xa1\xb4\x2d\x7f\xac\x32\x2d\x0b\x4a\x29\xe4\x29\xac\xd3\xb2\x8b\xe3\xa6\xa1\x2d\x6f\x3a\x85\xe7\xa5\xb4\x65\xf0\x1e\x94\xae\xa0\xb7\x2b\x7e\xc5\x04\xd1\x4f\xbe\xbb\x07\xbd\x35\xf2\x76\xb5\x17\x5c\xdf\x83\xca\x0b\xae\x77\xaa\xbb\x97\x33\x5a\xdc\xed\x2a\x57\xa5\xf6\xab\xeb\x74\xc0\xdb\x95\xfe\x42\xef\x85\x57\x03\xbb\x5b\xe1\xbd\x30\xeb\x80\x9d\xd2\xdd\xfd\x67\x5e\xe8\x0a\x5c\x57\x04\xc9\x1c\x93\x8f\x75\x45\xa8\x6b\xb1\xa9\x37\x1a\x39\xe4\x26\xd7\xd0\x94\x8a\x9c\x68\x6a\xc6\x8e\xea\x4b\x87\x09\x53\xd5\x55\xdd\x96\x74\x8a\x83\xed\xd3\x3d\x97\x62\xac\x41\xce\x41\x57\xa6\x39\xff\x5c\xcb\xa2\x42\xf8\x97\x6b\x24\xbe\xa8\xe7\xf3\x56\xd9\x3d\xf6\xfd\xd8\x65\xf3\xd8\x57\x06\xea\x0f\xef\x0f\xcf\x14\xd3\x2d\x8a\x26\x5f\x4f\xd1\x64\xa3\x68\xa7\x6f\x24\xa6\x25\x4f\x09\xd7\xc6\xbd\x37\x28\xdd\x94\x30\x45\xbd\x40\xe4\x2b\x9f\x11\x9e\xc2\xfb\xeb\x69\xa5\xf7\x29\xd3\x89\x28\xaa\x60\x3a\xac\x37\x04\x2a\xec\x16\x86\x95\x80\xaa\x13\xbe\x53\xf2\xbb\x91\x56\x7d\xae\xb0\xfb\xfc\x0f\x6b\x64\x5f\x85\x8d\xdb\x6c\x9b\x17\x45\xf3\x82\xd1\x59\x05\xf1\x46\x26\x36\x23\x53\xec\xab\xfe\xe6\xc5\xda\xa0\xa2\x0b\x9e\xe2\xd2\x8d\xbc\x3b\x07\x23\x3b\x0d\x75\x4b\x67\x63\x12\xea\xb6\x2d\x4d\xe8\xc0\xfd\x0a\x96\xe1\x10\xaa\x2e\x31\x96\x81\x5a\x6e\xb9\x3e\x66\x15\x7e\xdd\xe9\xe7\xf1\xf7\x3f\x3c\xf9\xce\x31\x4f\x8d\xaa\xe7\xe6\x38\xbd\xfd\xd1\xb6\x03\xf8\xe6\x04\x7e\x15\x76\xae\xea\xd2\xbb\x8e\xde\x96\x12\xe1\xf8\x18\xf2\xf7\x5e\x55\xff\xdc\x77\x12\x6a\x32\xe0\x6f\x28\xf0\xab\xb0\x77\x12\x32\x87\x31\xb5\xb3\xe9\xb8\x3a\xb7\xd4\x91\x91\x3a\x7c\x7b\xc7\x39\x45\x33\xaf\x2e\x24\x29\x8a\xbb\x3d\xd0\xb6\x2b\xbd\xc8\xa2\xe7\x69\x1a\x8c\xbe\xed\x7a\x6c\x91\x45\xe7\x82\x63\x50\xdf\xe4\x1a\xf2\x55\xc9\x7b\x09\xf5\x37\x78\x1d\xfa\x16\x59\x2b\xd4\x2b\x9e\x44\xbf\x11\xaa\x5f\x4b\x51\x16\x9d\x90\x37\x57\x72\xbd\x66\xad\x00\xf7\xc4\x60\xd2\xb8\xc9\x03\xed\xf4\xe2\x4f\xcb\x59\x74\x25\x4b\x9e\x10\x8d\xc1\x49\x57\xf1\xb4\x9c\x35\x35\x3b\x3f\xbc\x28\x67\x33\x94\x5b\xf4\xba\x85\xe8\x1d\x2a\xd4\xbd\x5a\xed\x63\xc6\x7f\x08\x4f\x59\xcd\x4a\xfd\xba\xa1\x5f\x89\x92\xa7\xcd\xe8\x35\xb0\xad\xc5\x7a\x57\x2f\xfc\xea\x66\x5e\x16\x8c\xea\x9f\x6c\x6e\x30\x7f\x8e\xd7\x26\x72\x4b\xf0\x2e\xe4\x5d\xc4\x77\xee\xda\xac\x21\xfb\x61\x6b\xe9\xe7\x8c\xed\x83\xfd\x86\x14\x41\xc9\xa9\x19\x25\xa3\x2b\x71\x45\x35\x43\xa3\x60\x17\x78\x2d\xd2\x4b\x84\xf3\x57\x4d\xc3\x26\xf7\x7a\x91\x17\x6e\xb3\xbb\x21\xde\x67\xb0\x13\xdb\x8f\x8a\x96\xec\x67\x88\x70\xb2\x6d\x1a\x7e\x31\x81\xb3\x8d\x06\x27\x5c\x0b\x7c\x29\xea\x8f\x62\xd1\x8f\x6a\x05\xbe\x14\x75\xa7\xcb\x56\xa8\x9f\x77\x58\x2a\xc9\x22\x3a\x97\x64\xf1\x86\xa8\x8f\x2d\x6a\xcd\x1f\xa7\x6c\x08\x34\x27\x19\x46\x6f\xcd\xa4\xf6\xe9\x76\xa5\xad\x13\x88\x6b\x98\xbb\xca\x76\x26\xcb\x58\x62\x86\xcb\x22\x7a\x29\xf2\x82\x32\x1c\xc4\x3d\xf9\x72\x25\xfb\xa6\x54\x7a\x2d\xbf\x47\xc2\x94\x58\xbf\xe8\xb5\x75\x05\x9e\xc9\xfd\x1a\x0a\xa2\x35\x4a\x7e\x67\x64\x94\xd8\xd8\xd3\xd0\x79\x77\x9f\x4d\xb7\x4e\xd0\xc8\xf5\x65\xdb\x8e\x09\x7e\x41\x74\x37\xfb\x15\x44\x7b\xd7\xd1\x4b\xa3\xa3\x55\xa9\x4c\x6d\x6d\x69\xae\xdf\x4f\x0d\xc6\xd0\xbe\x67\xdc\xb5\x35\x6e\xf9\xb9\xad\xfc\xed\xcf\x97\x17\xbf\xdf\xbb\x05\x56\x4b\x5f\xb9\x54\xa5\x2a\x68\x62\x5f\x07\xdb\x95\x73\xdf\xe7\x80\x6e\x96\x54\x43\x98\x49\x91\x0f\x41\x8b\x21\x9c\x74\xbd\xda\x2b\x6d\x6a\xaa\x75\xe6\x94\xa4\x2f\x09\x63\xfb\x34\x22\xdb\x32\x92\xff\x5f\x94\xa2\xcb\xaa\xf9\xe6\x5d\x47\xbf\x12\x56\xa2\x9d\x65\x5d\x7b\xdd\x62\xb8\x41\x06\x91\x19\x9c\x0c\xa1\x90\x62\x4a\xa6\xac\x82\x1c\x4d\x5f\x3c\xfa\x36\x0e\xa3\xe7\x7a\x83\xb7\x5f\x8a\xfc\xbf\x1a\xf4\xf9\x9a\xf8\x8f\xf2\xf3\x4f\xda\xd2\x30\xc6\x34\x67\x3c\x0d\x5a\x79\x3b\xe6\x62\x24\x0a\x70\x4b\x36\x0a\x9a\xa0\x54\xd9\x51\x97\xc8\xac\xb4\x0f\x99\x7d\x51\xb5\x79\xf9\x6d\x77\xa0\xf5\x4c\x42\x31\x85\x69\x55\xcf\xce\x1b\x59\x10\x05\x4a\xa2\xc5\x5e\x7d\xe8\x12\x26\xb0\x84\x01\x3c\xee\x44\xd8\x12\x06\x13\x78\xec\xe2\xc8\x41\xff\xdc\xff\x26\xec\x9e\x74\xe1\x11\x18\xbe\xee\x34\xef\x9b\xa2\xb6\x6d\xae\x5c\x3e\x7a\xd4\x2e\x91\x2b\xb4\xd1\x41\x68\xa3\x51\xb7\x53\x5d\x1b\xe7\x57\x07\xe0\xc1\xa3\x49\xfd\x52\xbd\xcd\xc2\xc3\x20\x47\x2b\xc8\x2d\x98\x83\x03\x31\x07\xbb\xcd\x1c\x1f\x08\x39\xde\x0d\xf9\xcd\x81\x90\xdf\xec\x86\x3c\x3e\x10\xf2\x78\x37\xe4\xdf\x07\x42\xfe\xbd\x1b\xf2\xcf\x03\x21\xff\xdc\x0d\x79\x76\x76\x20\xe6\xd9\xd9\x6e\xd0\x67\xcf\x0e\x04\x7d\xf6\xac\xc7\x45\x87\x9e\xfe\x78\x7d\xfc\xdb\xa3\xff\x05\x00\x00\xff\xff\x36\x89\xa4\x49\x7a\x20\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 8314,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1619810629, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
