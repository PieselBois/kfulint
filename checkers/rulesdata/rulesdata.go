// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x41\x6b\xdc\x30\x10\x85\xcf\xeb\x5f\x31\x18\x1f\x6c\xd8\xda\xa1\xb4\xa5\x2c\xe4\x52\x52\x42\x0e\xed\x21\x09\xf4\x10\x42\x57\x2b\x8d\x65\x11\x59\x72\x66\x46\x4d\x4c\xe9\x7f\x2f\xb6\x37\x74\xb3\x90\xed\x51\xe2\x69\xe6\xcd\x7c\x4f\x83\xd2\x0f\xca\x22\xd8\x48\xc9\x23\x67\x99\xeb\x87\x48\x02\x65\xb6\xca\xad\x93\x2e\xed\x6a\x1d\xfb\xe6\x31\x29\x76\x7e\x14\x6c\x6c\x7c\x37\x29\x6d\x52\x64\x1a\xc3\x3e\xcf\xaa\x2c\x6b\x1a\x13\xf5\x86\x53\xdf\x2b\x1a\xe1\x02\x05\xb5\x30\x04\xe7\x21\xb1\xb2\xc8\xe0\x02\x74\x22\x43\xfd\x1d\x9f\xae\xf1\x31\x21\x0b\x68\xe5\x3d\xaf\x81\x93\xb5\xc8\xe2\x82\xdd\x2b\xe2\x97\x68\x46\x50\x0c\x2a\x80\xf2\x82\x14\x94\xb8\x5f\xb8\xef\x21\xca\x32\x00\x00\xcb\xe8\x11\xf0\x79\x40\x72\x3d\x06\x51\x7e\x2f\xd8\x61\x1b\x09\xe1\xb8\x5d\x99\x5f\x7e\xbd\xcd\xd7\x90\xc8\xaf\x27\x63\xd5\x5e\xae\x5a\x41\x82\xd3\xf2\x03\x5f\x55\xd6\xa6\xa0\xe7\x9b\xe5\xa2\xec\xc1\xb0\xaf\xbf\x29\xd1\x1d\x52\x05\xbf\xb3\x55\xbf\x9c\xca\xfc\xb8\x66\xd1\xa3\x74\xd1\xac\xa1\x98\xcb\x16\x93\x8d\xbc\xaa\xb3\xd5\xea\x47\x87\x84\x65\x7f\x97\x07\xe7\xf3\xfb\xfa\x16\x9f\x05\xce\xcf\x61\x3e\xce\x82\x9b\x65\x4b\xff\xad\x79\x68\x75\x79\x79\x8d\x13\xcf\x97\x87\xcb\x72\xb9\x8b\xc9\x1b\xd8\x21\x0c\x84\x2d\x12\xa1\x01\x89\x20\x1d\xce\xcc\x68\x4f\x68\x17\xcd\x98\x57\xd9\x9f\xb7\xf8\xe2\xf3\x40\xc8\xec\x62\x60\xf0\xee\x01\xe1\xee\x9e\x52\xc0\x92\xab\xbb\xb3\x7b\x90\x4e\x09\xf4\x6a\x04\xad\x12\x23\xa4\xf0\xa4\x82\xa0\x81\x49\x02\xec\x9d\x46\x50\xde\x47\xad\xc4\xc5\x70\x44\x77\x40\x6a\x23\xf5\x2a\xe8\x93\x8c\x09\x36\xe7\xaf\x9a\x1e\x41\xa5\x35\xfc\x9c\x24\x49\xda\xcf\xf5\x05\xea\x68\xf0\x3a\x05\xbc\x0a\x37\x42\x2e\xd8\x92\x5f\x52\x10\xa2\xe0\xd4\xf7\x06\x11\x2e\x23\x38\xe6\x84\xd0\x46\x02\x83\xa2\x9c\xe7\xcd\xbc\x58\xde\x34\xcd\xc1\x9f\xb0\xd1\xab\x60\x1b\x1b\x9b\x59\xcf\xcd\x87\x8f\xef\x3f\x9d\x2d\x01\x59\xf6\xfa\xaf\xe5\x89\x98\x6c\xf7\x03\x14\xf3\x04\xdb\xd7\x79\xe0\x29\x0d\xe3\x80\xf5\x15\x97\x5b\x9e\x5d\x6f\xab\x43\xae\x5b\x1d\x03\x3b\x83\x04\x84\x83\x57\x7a\xfa\x47\x45\x01\x4f\x4e\xba\x37\xc7\x2e\xb8\xda\x4e\x58\xff\x06\x00\x00\xff\xff\x90\x51\x01\xf2\xfc\x03\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 1020,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1619772324, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
